on:
  push:
    branches:
      - main
  pull_request:
name: Install and Test

env:
  FORCE_COLOR: 1
  TURBO_TELEMETRY_DISABLED: 1
jobs:
  lambda-tests:
    runs-on: ubuntu-latest
    name: Lambda integration
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.20
      - run: |
          corepack enable
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "packages/renderer -> target"
      - name: Install
        run: pnpm install --frozen-lockfile
      - name: Build cache
        uses: actions/cache@v3.0.11
        with:
          # Currently disabled but would love to enable:
          path: |
            tsconfig.tsbuildinfo
            packages/*/dist
            packages/*/tsconfig.tsbuildinfo
            packages/*/.turbo
            packages/docs/node_modules/.cache
            packages/example/node_modules/.cache
            packages/google-fonts/.cache-css
          key: ts-${{ runner.os }}-node16-v3
      - name: build
        run: |
          pnpm build
      - name: Test Lambda IT
        run: |
          cd packages/it-tests && pnpm run testlambda
      - name: Test Lambda E2E
        run: |
          cd packages/lambda && pnpm run testintegration
  ssr-tests:
    runs-on: ubuntu-latest
    name: SSR integration
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.20
      - run: |
          corepack enable
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install
        run: pnpm install --frozen-lockfile
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup PHP with PHPUnit
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: phpunit:10.1.3
      - run: pip install pylint boto3 pytest
      - name: Build cache
        uses: actions/cache@v3.0.11
        with:
          path: |
            tsconfig.tsbuildinfo
            packages/*/dist
            packages/*/tsconfig.tsbuildinfo
            packages/*/.turbo
            packages/docs/node_modules/.cache
            packages/example/node_modules/.cache
            packages/google-fonts/.cache-css
          key: ts-${{ runner.os }}-node16-v3
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "packages/renderer -> target"
      - name: Build cache
        uses: actions/cache@v3.0.11
        with:
          path: |
            packages/google-fonts/.cache-css
          key: ssr-${{ runner.os }}-node16-v3

      - name: build
        run: |
          pnpm build
      - name: Test SSR
        timeout-minutes: 8
        run: |
          cd packages/it-tests && bun run testssr
  lint:
    runs-on: ubuntu-latest
    name: Linting + Formatting
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.20
      - run: |
          corepack enable
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install
        run: pnpm install --frozen-lockfile
      - name: Perform stylecheck
        timeout-minutes: 5
        run: |
          pnpm run stylecheck
  build:
    name: Build Node ${{ matrix.node_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            node_version: 16
          - os: windows-latest
            node_version: 16
          - os: macos-latest
            node_version: 16
          - os: macos-14
            node_version: 16
          - os: ubuntu-latest
            node_version: 20.5
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-go@v5
        if: matrix.os == 'macos-14'
        with:
          go-version: "1.20"
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.20
      - run: |
          corepack enable
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules/.cache
        uses: actions/cache@v3.0.11
        with:
          path: node_modules/.cache
          key: deps-${{ runner.os }}-node${{ matrix.node_version }}-v3
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "packages/renderer -> target"
      - name: Install
        run: pnpm install --frozen-lockfile
      - name: Build cache
        uses: actions/cache@v3.0.11
        with:
          path: |
            tsconfig.tsbuildinfo
            packages/*/dist
            packages/*/tsconfig.tsbuildinfo
            packages/*/.turbo
            packages/google-fonts/.cache-css
            packages/docs/node_modules/.cache
            packages/example/node_modules/.cache
          key: ts-${{ runner.os }}-node${{ matrix.node_version }}-v3

      - name: Build & Test
        run: |
          pnpm run ci
