@inject IJSRuntime JS
@inject IHttpClientFactory hcf
@inject IDialogService DialogService
<div style="
    padding: 16px;
    height: 100%;
" class="duration flex flex-row">
    <FluentNavMenu Width="250">
        @* <FluentNavLink Icon="@(new Icons.Regular.Size24.PuzzlePiece())" @onclick="@(() => {
        screen = "addons";
        })">Addons</FluentNavLink> *@

        <div class="my-4" style="
                font-size: 20px;
                font-weight: 500;
                display: flex;
                flex-direction: row;
                align-items: center;
                gap: 0.5rem;
            ">
            <svg style="width: 30px;" id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                <path d="M434.89,322.12h.43a41,41,0,0,0,40.95-41V115.4a63.83,63.83,0,0,0-63.83-63.83h-151a63.83,63.83,0,0,0-63.83,63.83v26.39L130.77,235c-8.34,11.6-8.34,30.41,0,42l52.77,78.61A30.36,30.36,0,0,0,208.73,369H216" style="fill: none;stroke: #fff;stroke-linecap: round;stroke-miterlimit: 10;stroke-width: 57px"/>
                <path d="M288.44,143H295a26,26,0,0,1,20.36,9.82L380.83,235c8.34,11.6,8.34,30.41,0,42l-66.52,92.53v27.13a63.83,63.83,0,0,1-63.83,63.83h-151a63.83,63.83,0,0,1-63.83-63.83V230.89a41,41,0,0,1,41-40.95h0" style="fill: none;stroke: #fff;stroke-linecap: round;stroke-miterlimit: 10;stroke-width: 57px"/>
                <line x1="239.74" y1="238.92" x2="272.26" y2="273.08" style="fill: none;stroke: #fff;stroke-linecap: round;stroke-miterlimit: 10;stroke-width: 54px"/>
            </svg>

            WallpaperUI
        </div>

        <div @onclick="@(() => {
                screen = "backgrounds";
            })"
            class="mt-0.5 rounded text-ellipsis w-full h-8 hover:bg-gray-700 bg-gray-900 transition-colors duration-100 flex flex-row cursor-pointer items-center">
            <div style="width: 9px;"></div>
            <div class="flex h-full flex-col items-center justify-center">
                <FluentIcon Value="@(new Icons.Regular.Size24.Image())" Color="@Color.Neutral" Style="width:20px;" />
            </div>
            <div style="width: 0.6rem"></div>
            Backgrounds
        </div>

        <div @onclick="@(() => {
                screen = "panels";
            })"
            class="mt-0.5 rounded text-ellipsis w-full h-8 hover:bg-gray-700 bg-gray-900 transition-colors duration-100 flex flex-row cursor-pointer items-center">
            <div style="width: 9px;"></div>
            <div class="flex h-full flex-col items-center justify-center">
                <FluentIcon Value="@(new Icons.Regular.Size24.Window())" Color="@Color.Neutral" Style="width:20px;" />
            </div>
            <div style="width: 0.6rem"></div>
            Widgets
        </div>

        <div @onclick="@(() => {
                screen = "preferences";
            })"
            class="mt-0.5 rounded text-ellipsis w-full h-8 hover:bg-gray-700 bg-gray-900 transition-colors duration-100 flex flex-row cursor-pointer items-center">
            <div style="width: 9px;"></div>
            <div class="flex h-full flex-col items-center justify-center">
                <FluentIcon Value="@(new Icons.Regular.Size24.Settings())" Color="@Color.Neutral" Style="width:20px;" />
            </div>
            <div style="width: 0.6rem"></div>
            Settings
        </div>
    </FluentNavMenu>

    <div style="width: 24px;"></div>
    <div class="h-full w-full" style="
        padding: 16px 12%;
        border-radius: 12px;
        background-color: #00000026;
        overflow: overlay;
    ">
        @if (screen == "addons")
        {
            <Addons></Addons>
        }
        @if (screen == "panels")
        {
            <Panels></Panels>
        }
        @if (screen == "backgrounds")
        {
            <Backgrounds></Backgrounds>
        }
        @if (screen == "preferences")
        {
            <Preferences></Preferences>
        }

    </div>
</div>

@code {
    [Parameter]
    public Home home { get; set; }

    public string screen = "backgrounds";

    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private HttpClient client = null;

    public static Settings Instance = null;

    private Dictionary<string, Boolean> menuOpen = new Dictionary<string, Boolean>();

    protected override void OnInitialized()
    {
        client = hcf.CreateClient();
        Instance = this;
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }

    private async Task OpenDialogAsync(string status)
    {
        DialogParameters parameters = new()
            {
                Title = $"Installation finished",
                PrimaryAction = "OK",
                PrimaryActionEnabled = true,
                SecondaryActionEnabled = false,

                Width = "500px",
                PreventScroll = true
            };
        var result = await DialogService.ShowDialogAsync<Dialog>(status, parameters);
        await result.Result;

    }
}
