@inject IJSRuntime JS
@inject IHttpClientFactory hcf
@inject IDialogService DialogService
<div style="
    padding: 16px;
    height: 100%;
" class="flex flex-row">
    <FluentNavMenu Width="250">
        <FluentNavLink Icon="@(new Icons.Regular.Size24.PuzzlePiece())" @onclick="@(() => {
            screen = "addons";
        })">Addons</FluentNavLink>
        <FluentNavLink Icon="@(new Icons.Regular.Size24.Window())" @onclick="@(() => {
            screen = "panels";
        })">Panels</FluentNavLink>
        <FluentNavLink Icon="@(new Icons.Regular.Size24.Wallpaper())" @onclick="@(() => {
            screen = "backgrounds";
        })">Backgrounds</FluentNavLink>
        <FluentNavLink Icon="@(new Icons.Regular.Size24.Settings())" @onclick="@(() => {
            screen = "preferences";
        })">Preferences</FluentNavLink>
    </FluentNavMenu>

    <div style="width: 24px;"></div>
    <div class="h-full w-full" style="
        padding: 16px;
        border-radius: 12px;
        background-color: rgba(0,0,0,0.15);
        overflow: overlay;
    ">
        @if (screen == "addons")
        {
            <Addons></Addons>
        }
        @if (screen == "panels")
        {

            <Panels></Panels>
        }
        @if (screen == "backgrounds")
        {
            <Backgrounds></Backgrounds>

        }
        @if (screen == "preferences")
        {
            <Preferences></Preferences>
        }


    </div>

</div>

@code {
    [Parameter]
    public Home home { get; set; }

    public string screen = "addons";

    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private HttpClient client = null;

    private Dictionary<string, Boolean> menuOpen = new Dictionary<string, Boolean>();

    protected override void OnInitialized()
    {
        client = hcf.CreateClient();
    }

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }

    private async Task OpenDialogAsync(string status)
    {
        DialogParameters parameters = new()
            {
                Title = $"Installation finished",
                PrimaryAction = "OK",
                PrimaryActionEnabled = true,
                SecondaryActionEnabled = false,
                
                Width = "500px",
                PreventScroll = true
            };
        var result = await DialogService.ShowDialogAsync<Dialog>(status,parameters);
        await result.Result;
        
    }
}
