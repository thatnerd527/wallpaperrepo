@using System.Text.Json

<FluentTooltip Anchor="infoTooltip" Position=TooltipPosition.End> These are the backgrounds from your installed addons.</FluentTooltip>

<div class="h-8"></div>
<div style="
                font-size: 26px;
                font-weight: 600;
                        ">
    Backgrounds
</div>

<div class="w-[150px] h-[120px] border-8 border-black">
    @*Preview*@
</div>

<div class="h-4"></div>

<div id="expander" class="@(recentBackgroundsOpen ? "bg-white/[.08]" : "bg-white/[.05]") @("hover:bg-white/[.08]") @(recentBackgroundsOpen ? "active:bg-white/[.09]" : "active:bg-white/[.05]") @(recentBackgroundsOpen ? "rounded-t-lg" : "rounded") mb-[2px] flex h-14 w-full flex-row rounded-t-lg p-3.5 text-base transition duration-100 hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)]"
     @onclick="@(async () => {
        recentBackgroundsOpen = !recentBackgroundsOpen;
        //await JS.InvokeVoidAsync("testanimation");
    })">
    <div class="flex h-full w-full flex-col justify-center">
        Recent backgrounds
    </div>
    <div class="flex flex-col items-end justify-center pr-2">
        <div class="@(recentBackgroundsOpen ? "rotate-0" : "rotate-180") transition-all duration-150 ease-in-out">
            <FluentIcon Value="@(new Icons.Regular.Size20.ChevronUp())" Color="@Color.Neutral" />
        </div>
    </div>
</div>
<div id="contentdiv" class="@(recentBackgroundsOpen ? "opacity-100 duration-200 max-h-max" : "max-h-0 opacity-0 delay-0 duration-0") w-full overflow-hidden transition-cardexpand ease-in-out">
    <div class="bg-white/[.08] mb-[2px] flex h-max min-h-8 w-full flex-row flex-wrap gap-2 p-4">
        <div class="hover:bg-white/[.08] active:bg-white/[.05] transition-all duration-150 ease-in-out cursor-pointer border-2 flex h-24 w-24 flex-col items-center justify-center rounded border-white" @onclick="@(async () => {
        var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/simplebackground")
                    );
                    res.Query = "resultfilename=" + Guid.NewGuid().ToString();
                    var result = await client.PostAsync(res.Uri, null);
                    var data = await result.Content.ReadAsStringAsync();

                    var decoded = SimpleBackgroundResponse.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data)!);
                    switch (decoded.Status) {
                        case "cancelled":
                            return;
                        case "errorprestart":
                            encodingErrorInPrestart = true;
                            encodingError = true;
                            error = decoded.Error;
                            showEncodingDialog = true;
                            break;
                        case "encoding":
                        cancelEncoding = false;
                            resultFile = decoded.ResultFile;
                            encodingID = decoded.EncodingGUID;
                            encodingError = false;
                            encodingErrorInPrestart = false;
                            showEncodingDialog = true;
                            break;
                    }
                    res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                    );
                    res.Query = "guid=" + encodingID;
                    StateHasChanged();
                    HttpResponseMessage? result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    var data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);
                    switch (decoded2.Status) {
                        case "askuser":
                            showAskMediaTypeDialog = true;
                            showEncodingDialog = false;
                            break;
                        case "done":
                            App.Instance.preferencesManager.Remove("simplebackground");
                            App.Instance.preferencesManager.Set("simplebackground", resultFile);
                            showEncodingDialog = false;
                            Home.currentBackground = "";
                            break;
                        default:
                            if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();
    })">
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" Color="@Color.Neutral" />
        </div>
        @foreach (var bkg in recentBackgrounds().OrderByDescending(x => Int64.Parse(x.Value.TimestampAddedNanos)))
        {
           @renderRecentBackgroundItem(bkg);
        }
    </div>
    <div class="bg-white/[.08] mb-[2px] h-12 w-full p-3.5 text-base" style="font-weight: 400; display: flex; flex-direction: row; gap: 10px; align-items: center;">
        From addons
    </div>
    <div class="bg-white/[.08] mb-[2px] flex h-max min-h-8 w-full flex-row flex-wrap gap-2 rounded-b-lg p-4">

        @foreach (var bkg in Home.availableBackgrounds)
        {
           @renderAvailableBackgroundsItem(bkg);
        }
    </div>
    
</div>
<div class="h-7"></div>
<div style="
                font-size: 26px;
                font-weight: 600;
                        ">
    Customization
</div>
<div class="h-4"></div>
@Item(
    @<FluentIcon Value="@(new Icons.Regular.Size24.Color())" Color="Color.Neutral"></FluentIcon>,
        "Accent color",
        "Change the color displayed throughout the system.",
    @<div class="w-full h-full flex flex-row gap-[8px] items-center justify-end">
        @foreach (var item in recentColors())
        {
            @renderRecentColorItem(item.Key, item.Value);
        }
        <input type="color" class="opacity-0 w-0 h-0 max-h-0 max-h-0" @ref=@(colorRef) @onchange="(e) => {
            var color = e.Value;
            var colorObj = new RecentColor() {
                HexColor = (string)color,
                TimestampAddedNanos = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds().ToString()

            };
            Home.AccentColor = (string)color;
            AddRecentColor(colorObj);
            while (recentColors().Count > 5)
            {
                RemoveOldestRecentColor();
            }
        }">
            
        </input>
        <div class="w-[24px] h-[24px] rounded-[100%] overflow-hidden border-2 p-[2px] flex flex-col items-center justify-center hover:bg-white/[.25] active:bg-white/[.10] cursor-pointer transition-all" @onclick="@(async () => {
            await JS.InvokeVoidAsync("doclick",colorRef);
        })">
            <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Color="Color.Neutral"></FluentIcon>
        </div>
            </div>
        )

@* OLD *@

<div class="h-4"></div>
<div>Persistent ID: @Home.currentBackground</div>

<!-- TODO: image carousel thingy here https://imgur.com/inEXZYt -->


<div class="card flex flex-row items-center justify-center">
    <FluentButton @onclick="@(async() => {
                    var req = App.Instance.controlPort;

                    var res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/simplebackground")
                    );
                    var result = await client.PostAsync(res.Uri, null);
                    var data = await result.Content.ReadAsStringAsync();

                    var decoded = SimpleBackgroundResponse.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data)!);
                    switch (decoded.Status) {
                        case "cancelled":
                            return;
                        case "errorprestart":
                            encodingErrorInPrestart = true;
                            encodingError = true;
                            error = decoded.Error;
                            showEncodingDialog = true;
                            break;
                        case "encoding":
                        cancelEncoding = false;
                            resultFile = decoded.ResultFile;
                            encodingID = decoded.EncodingGUID;
                            encodingError = false;
                            encodingErrorInPrestart = false;
                            showEncodingDialog = true;
                            break;
                    }
                    res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                    );
                    res.Query = "guid=" + encodingID;
                    StateHasChanged();
                    HttpResponseMessage? result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    var data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);
                    switch (decoded2.Status) {
                        case "askuser":
                            showAskMediaTypeDialog = true;
                            showEncodingDialog = false;
                            break;
                        case "done":
                            App.Instance.preferencesManager.Remove("simplebackground");
                            App.Instance.preferencesManager.Set("simplebackground", resultFile);
                            Home.currentBackground = "";
                            showEncodingDialog = false;
                            break;
                        default:
                            if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();


                })">
        <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Set Simple Background
    </FluentButton>
    <div class="w-4"></div>
    <FluentButton @onclick="@(async() => {
                    var req = App.Instance.controlPort;

                    var res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/simplebackground?delete=true")
                    );
                    var result = await client.GetAsync(res.Uri);

                })">
        <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Remove Simple Background
    </FluentButton>
</div>

<div class="h-8"></div>
<div style="font-size: 20px; font-weight: 500; display: flex; flex-direction: row; gap: 10px; align-items: center;">
    Available Backgrounds <FluentIcon Id="infoTooltip" Value="@(new Icons.Regular.Size16.Info())" />
</div>
<div class="h-4"></div>
<FluentAccordion>

    @foreach (var item in Home.availableBackgrounds)
    {
        <FluentAccordionItem Heading="@item.LoaderBackgroundID" Style="
                        padding: 10px;
                                                    ">
            <FluentIcon Value="@(new Icons.Regular.Size24.Wallpaper())" Color="@Color.Neutral" Slot="start" />

            <div>Background ID: @item.LoaderBackgroundID</div>
            <div>Background Type: @item.BackgroundType</div>

            <div>Background Control Port (websocket): @item.ControlPort</div>

            <div class="h-4"></div>
            <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
                <div style="min-width: max-content" class="flex flex-row">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@(async () => {
                                    var req = App.Instance.controlPort;
                                    var res = new UriBuilder(
                                        new Uri("http://127.0.0.1:" + req + "/simplebackground?delete=true")
                                    );
                                    var result = await client.GetAsync(res.Uri);
                                    Home.Instance.SetBackground(item.LoaderBackgroundID);
                            })">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Slot="start" Color="Color.Neutral"></FluentIcon>
                        Set as Background
                    </FluentButton>
                </div>
            </div>


        </FluentAccordionItem>
    }
</FluentAccordion>
<div class="h-8"></div>
<div style="
                font-size: 20px;
                font-weight: 500;
                                ">
    Last active Backgrounds
</div>
<div class="h-4"></div>
<FluentAccordion>

    @foreach (var item in Home.backgrounds)
    {
        <FluentAccordionItem Heading="@item.LoaderBackgroundID" Style="
                        padding: 10px;
                                                            ">
            <FluentIcon Value="@(new Icons.Regular.Size24.Wallpaper())" Color="@Color.Neutral" Slot="start" />

            <div>Background ID: @item.LoaderBackgroundID</div>
            <div>Background Type: @item.BackgroundType</div>
            <div>Persistent Background ID: @item.PersistentBackgroundID</div>

            <div>Added by: @item.ClientID</div>
            <div>Background Content: @item.BackgroundContent</div>
            <div>Background Control Port (websocket): @item.ControlPort</div>
            <div class="h-4"></div>
            <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
                <div style="min-width: max-content" class="flex flex-row">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@(async () => {
                                    var req = App.Instance.controlPort;
                                    var res = new UriBuilder(
                                        new Uri("http://127.0.0.1:" + req + "/simplebackground?delete=true")
                                    );
                                    var result = await client.GetAsync(res.Uri);
                                    Home.Instance.SetBackground(item.LoaderBackgroundID);
                            })">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Slot="start" Color="Color.Neutral"></FluentIcon>
                        Set as Background
                    </FluentButton>
                </div>
            </div>


        </FluentAccordionItem>
    }
</FluentAccordion>
<div class="card2 absolute left-0 top-0 h-full w-full flex-col items-center justify-center"
     style="
        display: @(showEncodingDialog ? "flex" : "none");
    ">
    <div class="m-8 bg-neutral-700 p-8" style="
        border-radius: 12px;
    ">
        <div style="
                font-size: 26px;
                font-weight: 600;
                            ">
            @(encodingError ? "Error" : "Converting media.")
        </div>
        <div class="h-8"></div>
        @(encodingError ? error : "Before setting this file as a wallpaper, the file needs to be converted in order to be able to be set as a wallpaper. So please wait while we convert your files. If you're on battery power, please plug in your device to wall power now.")
        <div class="h-8"></div>
        <FluentProgress Indeterminate="true"></FluentProgress>
        <div class="h-8"></div>
        <div class="flex w-full flex-row items-end justify-end">
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                showEncodingDialog=false;
                cancelEncoding = true;
                if (!encodingError) {
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=stop";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();
                }

                StateHasChanged();

            })">
                Cancel
            </FluentButton>
        </div>
    </div>
</div>
<div class="card2 absolute left-0 top-0 h-full w-full flex-col items-center justify-center"
     style="
        display: @(showAskMediaTypeDialog ? "flex" : "none");
    ">
    <div class="m-8 bg-neutral-700 p-8" style="
        border-radius: 12px;
    ">
        <div style="
                font-size: 26px;
                font-weight: 600;
                            ">
            Specify media type
        </div>
        <div class="h-8"></div>
        The files media type seems to be unidentifiable by the system. Please select the media type below.
        <div class="h-8"></div>
        <div class="flex w-full flex-row items-center justify-center">
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                    showAskMediaTypeDialog = false;
                    showEncodingDialog = true;
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=Video";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();
                    res.Query = "guid=" + encodingID + "&action=status";
                    resultFile = await client.GetStringAsync(res.Uri);
                    res.Query = "guid=" + encodingID;
                    result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);
                    switch (decoded2.Status) {
                        case "done":
                            App.Instance.preferencesManager.Remove("simplebackground");
                            App.Instance.preferencesManager.Set("simplebackground", resultFile);
                            Home.currentBackground = "";
                            showEncodingDialog = false;
                            break;
                        default:
                        if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();
            })" Class="w-full h-full min-h-20" Style="height: 100%;">
                <FluentIcon Value="@(new Icons.Regular.Size20.Video())" Slot="start" Color="Color.Neutral"></FluentIcon>
                Video
            </FluentButton>
            <div class="min-h-20 w-4"></div>
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                    showAskMediaTypeDialog = false;
                    showEncodingDialog = true;
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=Image";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();
                    res.Query = "guid=" + encodingID + "&action=status";
                    resultFile = await client.GetStringAsync(res.Uri);
                    res.Query = "guid=" + encodingID;
                    result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);

                    switch (decoded2.Status) {
                        case "done":
                            App.Instance.preferencesManager.Remove("simplebackground");
                            App.Instance.preferencesManager.Set("simplebackground", resultFile);
                            Home.currentBackground = "";
                            showEncodingDialog = false;
                            break;
                        default:
                        if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();
            })" Class="w-full h-full min-h-20" Style="height: 100%;">
                <FluentIcon Value="@(new Icons.Regular.Size20.Image())" Slot="start" Color="Color.Neutral"></FluentIcon>
                Image
            </FluentButton>
        </div>
        <div class="h-8"></div>
        <div class="flex w-full flex-row items-end justify-end">
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                    showAskMediaTypeDialog = false;
                    showEncodingDialog = false;
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=cancel";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();

                    StateHasChanged();
            })">
                Cancel
            </FluentButton>

        </div>
    </div>
</div>



@inject IHttpClientFactory hcf
@inject IDialogService DialogService
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Text.Json.Nodes;
@code {
    private HttpClient client = null;
    public static Backgrounds Instance = null;
    private bool showEncodingDialog = false;
    private bool showAskMediaTypeDialog = false;
    private string encodingID = "";
    private string error = "";
    private string resultFile = "";
    private bool encodingError = false;
    private bool cancelEncoding = false;
    private bool encodingErrorInPrestart = false;
    private bool recentBackgroundsOpen = false;
    private ElementReference colorRef;

    private Dictionary<string, RecentBackground> recentBackgrounds()
    {
        if (App.Instance.preferencesManager.GetPreferences().TryGetValue("recentbackgrounds", out var bkgs))
        {
            JsonElement elem = bkgs;
            return elem.EnumerateObject()
            .Select(x => new KeyValuePair<string, RecentBackground>(x.Name, RecentBackground.FromJsonElement(x.Value)))
            .ToDictionary(x => x.Key, x => x.Value);
        }
        else
        {
            return [];
        }
    }

    private Dictionary<string, RecentColor> recentColors()
    {
        if (App.Instance.preferencesManager.GetPreferences().TryGetValue("recentcolors", out var colors))
        {
            JsonElement elem = colors;
            return elem.EnumerateObject()
            .Select(x => new KeyValuePair<string, RecentColor>(x.Name, RecentColor.FromJsonElement(x.Value)))
            .ToDictionary(x => x.Key, x => x.Value);
        }
        else
        {
            return [];
        }
    }

    private void AddRecentColor(RecentColor color)
    {
        var element = App.Instance.preferencesManager.GetOrDefault<JsonElement>("recentcolors", new JsonElement());


        var subelement = new JsonObject();

        subelement.Add("hexcolor", color.HexColor);
        subelement.Add("timestampaddednanos", color.TimestampAddedNanos);
        element = element.Set(color.HexColor.GetHashCode(), subelement);
        App.Instance.preferencesManager.Set("recentcolors", element);
    }

    private void RemoveOldestRecentColor()
    {
        var element = App.Instance.preferencesManager.GetOrDefault<JsonElement>("recentcolors", new JsonElement());
        var key = element.EnumerateObject().OrderBy(x => Int64.Parse(x.Value.GetProperty("timestampaddednanos").GetString())).First().Name;
        element = element.Remove(key);
        App.Instance.preferencesManager.Set("recentcolors", element);
    }

    

    protected override void OnInitialized()
    {
        Instance = this;
        client = hcf.CreateClient();
        client.Timeout = Timeout.InfiniteTimeSpan;
        App.Instance.preferencesManager.AddChangeHandler(x =>
        {
            Refresh();
            return x;
        });
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    protected RenderFragment Item(RenderFragment icon, string header, string caption, RenderFragment button)
    {
        return @<div>
        <div class="bg-white/[.05] flex min-h-16 w-full flex-row items-center rounded">
            <div class="w-5"></div>
            @icon
            <div class="w-5"></div>
            <div class="flex w-full flex-row">
                <div class="flex h-full w-full flex-col items-center justify-start">
                    <div class="w-full font-normal">
                        @header
                    </div>
                    <div class="text-white/75 w-full text-xs font-light">
                        @caption
                    </div>
                </div>
                <div class="flex w-full flex-row items-center justify-end">
                    @button
                    <div class="w-4"></div>
                </div>
            </div>
        </div>
        <div class="h-1"></div>
    </div>;
    }

    private RenderFragment renderAvailableBackgroundsItem(RuntimeCustomBackground runtimeCustomBackground)
    {
        var guid = Guid.NewGuid().ToString();
        return @<div class="hover:bg-white/[.08] active:bg-white/[.05] transition-all duration-150 ease-in-out cursor-pointer flex h-24 w-24 flex-col items-center justify-center rounded overflow-hidden  border-2 @(new Func<String>(() => {
           
            var background = Home.backgrounds.FirstOrDefault(x => x.PersistentBackgroundID == Home.currentBackground,null);
            if (background == null) {
                return "border-transparent hover:border-white";
            }
            var comparison = background.LoaderBackgroundID == runtimeCustomBackground.LoaderBackgroundID;
            return comparison ? "border-white" : "border-transparent hover:border-white";
        }).Invoke())" @onclick="@(async () => {
                            Home.Instance.SetBackground(runtimeCustomBackground.LoaderBackgroundID);
                    })">
                        @{
                            switch (runtimeCustomBackground.BackgroundType)
                            {
                                case "Image":
                                    <img src="@(runtimeCustomBackground.BackgroundContent)" class="w-full h-full object-cover rounded" />
                                    break;
                                case "Video":
                                    <div class="h-full w-full">
                                        <video style="object-fit: cover;" id="@guid" class="pointer-events-none h-full w-full rounded" src="@(runtimeCustomBackground.BackgroundContent)" type="video/webm">
                    <!--<source src="@(runtimeCustomBackground.BackgroundContent)" type="video/webm" />-->
                                        </video>
                                        <script id="@(guid + "_helper")">
                                            var video = document.getElementById(document.currentScript.id.replaceAll("_helper", ""))
                                            video.muted = true;
                                            video.loop = true;
                                            video.play();
                                            console.log(video)
                                        </script>
                                    </div>
                                    break;
                                case "Embedded":
                                    <div>unrendereable</div>
                                    break;
                            }
                        }

                    </div>;
    }

    private RenderFragment renderRecentBackgroundItem(KeyValuePair<string, RecentBackground> bkg)
    {
        var guid = Guid.NewGuid().ToString();
        return @<div class="hover:bg-white/[.08] active:bg-white/[.05] transition-all duration-150 ease-in-out cursor-pointer flex h-24 w-24 flex-col items-center justify-center rounded overflow-hidden border-2 @(new Func<String>(() => {
            if (Home.Instance.IsSimpleBackground()) {
                var processed =  Path.GetFileName(Home.Instance.GetCurrentBackground().Replace("\\","/"));
                var comparison = bkg.Value.Filename == processed;
                return comparison ? "border-white" : "border-transparent hover:border-white";
            } else {
                var comparison = bkg.Value.PersistentBackgroundID == Home.Instance.GetCurrentBackground();
                return comparison ? "border-white" : "border-transparent hover:border-white";
            }
        }).Invoke())" @onclick="@(async () => {
                    if (bkg.Value.Filename.Length == 0) {
                        Home.Instance.SetBackgroundFromPersistent(bkg.Value.PersistentBackgroundID);
                    } else {
                        var req = App.Instance.controlPort;
                        var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/setbackgroundfromcache")
                        );

                        res.Query = "filename=" + bkg.Value.Filename;
                        var result = await client.GetAsync(res.Uri);
                        Home.currentBackground = "";
                        App.SaveBackgroundData(Home.backgrounds);
                    }
            })">
        @if(bkg.Value.Filename.Length == 0) {

            var background = Home.backgrounds.FirstOrDefault(x => x.PersistentBackgroundID == bkg.Value.PersistentBackgroundID);
            if (background == null) {
                <div>Background not found</div>

            } else if (background.BackgroundType == "Image")
            {
                <img src="@(background.BackgroundContent)" class="w-full h-full object-cover rounded" />
            }
            else if (background.BackgroundType == "Video")
            {
                <div class="h-full w-full">
                    <video style="object-fit: cover;" id="@guid" class="pointer-events-none h-full w-full rounded" src="@(background.BackgroundContent)" type="video/webm">
                        
                    </video>
                    <script id="@(guid + "_helper")">
                        var video = document.getElementById(document.currentScript.id.replaceAll("_helper", ""))
                        video.muted = true;
                        video.loop = true;
                        video.play();
                        console.log(video)
                    </script>
                </div>;
            }

    } else {
        if (bkg.Value.Filename.EndsWith(".png"))
        {
            <img src="http://127.0.0.1:@(App.Instance.controlPort)/getpreviewfile?filename=@(bkg.Value.Filename)" class="w-full h-full object-cover rounded" />
        }
        else if (bkg.Value.Filename.EndsWith(".webm"))
        {
            <div class="h-full w-full">
            <video style="object-fit: cover;" id="@guid" class="pointer-events-none h-full w-full rounded" src="http://127.0.0.1:@(App.Instance.controlPort)/getpreviewfile?filename=@(bkg.Value.Filename)" type="video/webm">
                    
                </video>
                <script id="@(guid + "_helper")">
                    var video = document.getElementById(document.currentScript.id.replaceAll("_helper", ""))
                    video.muted = true;
                    video.loop = true;
                    video.play();
                    console.log(video)
                </script>
            </div>
        ;
        }
    }
    </div>
    ;
    }

    public RenderFragment renderRecentColorItem(string colorid, RecentColor color)
    {
        return@<div class="w-[24px] h-[24px] rounded-[100%] overflow-hidden border-2 radioinactive hover:radioactive hover:border-4 cursor-pointer flex flex-col items-center justify-center transition-all duration-150">
        <div style="border-radius: 100%; overflow: hidden; background-color: @(color.HexColor); min-height: var(--subsize); min-width: var(--subsize);" class="transition-all ease-in-out duration-150">
            </div>
        </div>;
    }

    private void OnDismiss()
    { }
}
