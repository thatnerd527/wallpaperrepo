@using System.Text.Json

<FluentTooltip Anchor="infoTooltip" Position=TooltipPosition.End> These are the backgrounds from your installed addons.</FluentTooltip>

<div class="h-8"></div>
<div style="
                font-size: 26px;
                font-weight: 600;
                        ">
    Backgrounds
</div>

<div class="w-[150px] h-[120px] border-8 border-black">
    @*Preview*@
</div>

<div class="h-4"></div>

<div id="expander" class="@(recentBackgroundsOpen ? "bg-white/[.08]" : "bg-white/[.05]") @("hover:bg-white/[.08]") @(recentBackgroundsOpen ? "active:bg-white/[.09]" : "active:bg-white/[.05]") @(recentBackgroundsOpen ? "rounded-t-lg" : "rounded") mb-[2px] flex h-14 w-full flex-row rounded-t-lg p-3.5 text-base transition duration-100 hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)]"
     @onclick="@(async () => {
        recentBackgroundsOpen = !recentBackgroundsOpen;
        //await JS.InvokeVoidAsync("testanimation");
    })">
    <div class="flex h-full w-full flex-col justify-center">
        Recent backgrounds
    </div>
    <div class="flex flex-col items-end justify-center pr-2">
        <div class="@(recentBackgroundsOpen ? "rotate-0" : "rotate-180") transition-all duration-150 ease-in-out">
            <FluentIcon Value="@(new Icons.Regular.Size20.ChevronUp())" Color="@Color.Neutral" />
        </div>
    </div>
</div>
<div id="contentdiv" class="@(recentBackgroundsOpen ? "opacity-100 duration-200 max-h-max" : "max-h-0 opacity-0 delay-0 duration-0") w-full overflow-hidden transition-cardexpand ease-in-out">
    <div class="bg-white/[.08] mb-[2px] flex h-max min-h-8 w-full flex-row flex-wrap gap-2 p-4">
        <div class="hover:bg-white/[.08] active:bg-white/[.05] transition-all duration-150 ease-in-out cursor-pointer border-2 flex h-24 w-24 flex-col items-center justify-center rounded border-white" @onclick="@(async () => {
        var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/simplebackground")
                    );
                    var request = new SimpleBackgroundRequest();
                    var backgroundid = Guid.NewGuid().ToString();
                    this.backgroundid = backgroundid;
                    request.ResultFileName = backgroundid;
                    request.RequestType = SimpleBackgroundRequest.Types.RequestType.Add;
                    request.SimpleBackgroundID = backgroundid;
                    HttpResponseMessage? result = null;
                    using (var stream = new MemoryStream())
                    {
                        request.WriteTo(stream);
                        result = await client.PostAsync(res.Uri, new ByteArrayContent(stream.ToArray()));
                    }
                    var data = await result.Content.ReadAsByteArrayAsync();

                    var decoded = SimpleBackgroundResponse.Parser.ParseFrom(data);
                    switch (decoded.ResponseType) {
                        case SimpleBackgroundResponse.Types.ResponseType.Cancelled:
                            return;
                        case SimpleBackgroundResponse.Types.ResponseType.Failure:
                            encodingErrorInPrestart = true;
                            encodingError = true;
                            error = decoded.ErrorMessage;
                            showEncodingDialog = true;
                            return;
                        case SimpleBackgroundResponse.Types.ResponseType.Success:
                            cancelEncoding = false;
                            resultFile = decoded.ResultFilePath;
                            encodingID = decoded.EncodingTicketID;
                            originalFilePath = decoded.OriginalFilePath;
                            encodingError = false;
                            encodingErrorInPrestart = false;
                            showEncodingDialog = true;
                            break;
                    }
                    res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                    );
                    res.Query = "guid=" + encodingID;
                    StateHasChanged();
                    HttpResponseMessage? result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    var data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);
                    switch (decoded2.Status) {
                        case "askuser":
                            showAskMediaTypeDialog = true;
                            showEncodingDialog = false;
                            break;
                        case "done":
                            await App.Instance.preferencesManager.Write(async (x) => {
                                x.SimpleBackgroundsSystem.SimpleBackgrounds.Add(new Wallpaper.CommonLanguage.SimpleBackground() {
                                    BackgroundID = backgroundid,
                                    FilePath = resultFile,
                                    OriginalFilePath = decoded.OriginalFilePath,
                                    TimestampAdded = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
                                });
                                x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = true;
                                x.SimpleBackgroundsSystem.ActiveSimpleBackgroundID = backgroundid;
                                return x;
                            });
                            showEncodingDialog = false;
                            Home.currentBackground = "";
                            break;
                        default:
                            if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();
    })">
            <FluentIcon Value="@(new Icons.Regular.Size24.Add())" Color="@Color.Neutral" />
        </div>
        @foreach (var bkg in recentBackgrounds().OrderByDescending(x => x.Value.TimestampAdded))
        {
           @renderRecentBackgroundItem(bkg);
        }
    </div>
    <div class="bg-white/[.08] mb-[2px] h-12 w-full p-3.5 text-base" style="font-weight: 400; display: flex; flex-direction: row; gap: 10px; align-items: center;">
        From addons
    </div>
    <div class="bg-white/[.08] mb-[2px] flex h-max min-h-8 w-full flex-row flex-wrap gap-2 p-4">

        @foreach (var bkg in Home.availableBackgrounds)
        {
           @renderAvailableBackgroundsItem(bkg);
        }
    </div>
    <div class="w-full bg-white/[.08] flex flex-row active:bg-white/[.03] transition-all duration-150 ease-in-out p-4 h-16 rounded-b-lg justify-start items-center hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)]" @onclick="@(() => {
        Settings.Instance.screen = "preferences";
        Settings.Instance.Refresh();
    })">
        <div class="w-full">
            You have to go to settings to modify addon wallpapers
        </div>
        <FluentIcon Value="@(new Icons.Regular.Size16.Open())" Color="Color.Neutral">

        </FluentIcon>
    </div>
    
</div>
<div class="h-7"></div>
<div style="
                font-size: 26px;
                font-weight: 600;
                        ">
    Customization
</div>
<div class="h-4"></div>
@Item(
    @<FluentIcon Value="@(new Icons.Regular.Size24.Color())" Color="Color.Neutral"></FluentIcon>,
        "Accent color",
        "Change the color displayed throughout the system.",
    @<div class="w-full h-full flex flex-row gap-[8px] items-center justify-end">
        @foreach (var item in recentColors())
        {
            @renderRecentColorItem(item.Key, item.Value);
        }
        <input type="color" class="opacity-0 w-0 h-0 max-h-0 max-h-0" @ref=@(colorRef) @onchange="async (e) => {
            var color = e.Value;
            var colorObj = new RecentColor() {
                Color = (string)color,
                TimestampAdded = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()

            };
            await Home.SetAccentColor((string)color);
            await AddRecentColor(colorObj);
            while (recentColors().Count > 5)
            {
                await RemoveOldestRecentColor();
            }
        }">
            
        </input>
        <div class="w-[24px] h-[24px] rounded-[100%] overflow-hidden border-2 p-[2px] flex flex-col items-center justify-center hover:bg-white/[.25] active:bg-white/[.10] cursor-pointer transition-all" @onclick="@(async () => {
            await JS.InvokeVoidAsync("doclick",colorRef);
        })">
            <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Color="Color.Neutral"></FluentIcon>
        </div>
            </div>
        )

@* OLD *@

<div class="h-4"></div>
<div>Persistent ID: @Home.currentBackground</div>

<!-- TODO: image carousel thingy here https://imgur.com/inEXZYt -->
@*<div class="card flex flex-row items-center justify-center">
    <FluentButton @onclick="@(async() => {
                    var req = App.Instance.controlPort;

                    var res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/simplebackground")
                    );
                    var result = await client.PostAsync(res.Uri, null);
                    var data = await result.Content.ReadAsStringAsync();

                    var decoded = SimpleBackgroundResponse.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data)!);
                    switch (decoded.Status) {
                        case "cancelled":
                            return;
                        case "errorprestart":
                            encodingErrorInPrestart = true;
                            encodingError = true;
                            error = decoded.Error;
                            showEncodingDialog = true;
                            break;
                        case "encoding":
                        cancelEncoding = false;
                            resultFile = decoded.ResultFile;
                            encodingID = decoded.EncodingGUID;
                            encodingError = false;
                            encodingErrorInPrestart = false;
                            showEncodingDialog = true;
                            break;
                    }
                    res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                    );
                    res.Query = "guid=" + encodingID;
                    StateHasChanged();
                    HttpResponseMessage? result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    var data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);
                    switch (decoded2.Status) {
                        case "askuser":
                            showAskMediaTypeDialog = true;
                            showEncodingDialog = false;
                            break;
                        case "done":
                            App.Instance.preferencesManager.Remove("simplebackground");
                            App.Instance.preferencesManager.Set("simplebackground", resultFile);
                            Home.currentBackground = "";
                            showEncodingDialog = false;
                            break;
                        default:
                            if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();


                })">
        <FluentIcon Value="@(new Icons.Regular.Size20.Add())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Set Simple Background
    </FluentButton>
    <div class="w-4"></div>
    <FluentButton @onclick="@(async() => {
                    var req = App.Instance.controlPort;

                    var res = new UriBuilder(
                        new Uri("http://127.0.0.1:" + req + "/simplebackground?delete=true")
                    );
                    var result = await client.GetAsync(res.Uri);

                })">
        <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Remove Simple Background
    </FluentButton>
</div>

<div class="h-8"></div>
<div style="font-size: 20px; font-weight: 500; display: flex; flex-direction: row; gap: 10px; align-items: center;">
    Available Backgrounds <FluentIcon Id="infoTooltip" Value="@(new Icons.Regular.Size16.Info())" />
</div>
<div class="h-4"></div>
<FluentAccordion>

    @foreach (var item in Home.availableBackgrounds)
    {
        <FluentAccordionItem Heading="@item.LoaderBackgroundID" Style="
                        padding: 10px;
                                                    ">
            <FluentIcon Value="@(new Icons.Regular.Size24.Wallpaper())" Color="@Color.Neutral" Slot="start" />

            <div>Background ID: @item.LoaderBackgroundID</div>
            <div>Background Type: @item.BackgroundType</div>

            <div>Background Control Port (websocket): @item.ControlPort</div>

            <div class="h-4"></div>
            <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
                <div style="min-width: max-content" class="flex flex-row">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@(async () => {
                                    var req = App.Instance.controlPort;
                                    var res = new UriBuilder(
                                        new Uri("http://127.0.0.1:" + req + "/simplebackground?delete=true")
                                    );
                                    var result = await client.GetAsync(res.Uri);
                                    Home.Instance.SetBackground(item.LoaderBackgroundID);
                            })">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Slot="start" Color="Color.Neutral"></FluentIcon>
                        Set as Background
                    </FluentButton>
                </div>
            </div>


        </FluentAccordionItem>
    }
</FluentAccordion>
<div class="h-8"></div>
<div style="
                font-size: 20px;
                font-weight: 500;
                                ">
    Last active Backgrounds
</div>
<div class="h-4"></div>
<FluentAccordion>

    @foreach (var item in Home.backgrounds)
    {
        <FluentAccordionItem Heading="@item.LoaderBackgroundID" Style="
                        padding: 10px;
                                                            ">
            <FluentIcon Value="@(new Icons.Regular.Size24.Wallpaper())" Color="@Color.Neutral" Slot="start" />

            <div>Background ID: @item.LoaderBackgroundID</div>
            <div>Background Type: @item.BackgroundType</div>
            <div>Persistent Background ID: @item.PersistentBackgroundID</div>

            <div>Added by: @item.ClientID</div>
            <div>Background Content: @item.BackgroundContent</div>
            <div>Background Control Port (websocket): @item.ControlPort</div>
            <div class="h-4"></div>
            <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
                <div style="min-width: max-content" class="flex flex-row">
                    <FluentButton Appearance="Appearance.Neutral" @onclick="@(async () => {
                                    var req = App.Instance.controlPort;
                                    var res = new UriBuilder(
                                        new Uri("http://127.0.0.1:" + req + "/simplebackground?delete=true")
                                    );
                                    var result = await client.GetAsync(res.Uri);
                                    Home.Instance.SetBackground(item.LoaderBackgroundID);
                            })">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Slot="start" Color="Color.Neutral"></FluentIcon>
                        Set as Background
                    </FluentButton>
                </div>
            </div>


        </FluentAccordionItem>
    }
</FluentAccordion>*@

<div class="card2 absolute left-0 top-0 h-full w-full flex-col items-center justify-center"
     style="
        display: @(showEncodingDialog ? "flex" : "none");
    ">
    <div class="m-8 bg-neutral-700 p-8" style="
        border-radius: 12px;
    ">
        <div style="
                font-size: 26px;
                font-weight: 600;
                            ">
            @(encodingError ? "Error" : "Converting media.")
        </div>
        <div class="h-8"></div>
        @(encodingError ? error : "Before setting this file as a wallpaper, the file needs to be converted in order to be able to be set as a wallpaper. So please wait while we convert your files. If you're on battery power, please plug in your device to wall power now.")
        <div class="h-8"></div>
        <FluentProgress Indeterminate="true"></FluentProgress>
        <div class="h-8"></div>
        <div class="flex w-full flex-row items-end justify-end">
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                showEncodingDialog=false;
                cancelEncoding = true;
                if (!encodingError) {
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=stop";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();
                }

                StateHasChanged();

            })">
                Cancel
            </FluentButton>
        </div>
    </div>
</div>
<div class="card2 absolute left-0 top-0 h-full w-full flex-col items-center justify-center"
     style="
        display: @(showAskMediaTypeDialog ? "flex" : "none");
    ">
    <div class="m-8 bg-neutral-700 p-8" style="
        border-radius: 12px;
    ">
        <div style="
                font-size: 26px;
                font-weight: 600;
                            ">
            Specify media type
        </div>
        <div class="h-8"></div>
        The files media type seems to be unidentifiable by the system. Please select the media type below.
        <div class="h-8"></div>
        <div class="flex w-full flex-row items-center justify-center">
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                    showAskMediaTypeDialog = false;
                    showEncodingDialog = true;
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=Video";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();
                    res.Query = "guid=" + encodingID + "&action=status";
                    resultFile = await client.GetStringAsync(res.Uri);
                    res.Query = "guid=" + encodingID;
                    result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);
                    switch (decoded2.Status) {
                        case "done":
                            await App.Instance.preferencesManager.Write(async (x) => {
                                x.SimpleBackgroundsSystem.SimpleBackgrounds.Add(new Wallpaper.CommonLanguage.SimpleBackground() {
                                    BackgroundID = backgroundid,
                                    FilePath = resultFile,
                                    OriginalFilePath = originalFilePath,
                                    TimestampAdded = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
                                });
                                x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = true;
                                x.SimpleBackgroundsSystem.ActiveSimpleBackgroundID = backgroundid;
                                return x;
                            });
                            Home.currentBackground = "";
                            showEncodingDialog = false;
                            break;
                        default:
                        if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();
            })" Class="w-full h-full min-h-20" Style="height: 100%;">
                <FluentIcon Value="@(new Icons.Regular.Size20.Video())" Slot="start" Color="Color.Neutral"></FluentIcon>
                Video
            </FluentButton>
            <div class="min-h-20 w-4"></div>
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                    showAskMediaTypeDialog = false;
                    showEncodingDialog = true;
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=Image";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();
                    res.Query = "guid=" + encodingID + "&action=status";
                    resultFile = await client.GetStringAsync(res.Uri);
                    res.Query = "guid=" + encodingID;
                    result2 = null;
                    while (result2 == null) {
                        try {
                            result2 = await client.GetAsync(res.Uri);
                        } catch (Exception) {
                            await Task.Delay(1000);
                            continue;
                        }
                    }
                    data2 = await result2.Content.ReadAsStringAsync();
                    var decoded2 = EncodingStatus.FromJsonElement(JsonSerializer.Deserialize<JsonElement>(data2)!);

                    switch (decoded2.Status) {
                        case "done":
                            await App.Instance.preferencesManager.Write(async (x) => {
                                x.SimpleBackgroundsSystem.SimpleBackgrounds.Add(new Wallpaper.CommonLanguage.SimpleBackground() {
                                    BackgroundID = backgroundid,
                                    FilePath = resultFile,
                                    OriginalFilePath = originalFilePath,
                                    TimestampAdded = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
                                });
                                x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = true;
                                x.SimpleBackgroundsSystem.ActiveSimpleBackgroundID = backgroundid;
                                return x;
                            });
                            Home.currentBackground = "";
                            showEncodingDialog = false;
                            break;
                        default:
                        if (cancelEncoding) {
                                cancelEncoding = false;
                                return;
                            }
                            encodingError  = true;
                            error = decoded2.Status;
                            showEncodingDialog = true;
                            encodingErrorInPrestart = false;
                            break;
                    }
                    StateHasChanged();
            })" Class="w-full h-full min-h-20" Style="height: 100%;">
                <FluentIcon Value="@(new Icons.Regular.Size20.Image())" Slot="start" Color="Color.Neutral"></FluentIcon>
                Image
            </FluentButton>
        </div>
        <div class="h-8"></div>
        <div class="flex w-full flex-row items-end justify-end">
            <FluentButton Appearance="Appearance.Stealth" @onclick="@(async () => {
                    showAskMediaTypeDialog = false;
                    showEncodingDialog = false;
                    var req = App.Instance.controlPort;
                    var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/getencodingstatus")
                        );
                    res.Query = "guid=" + encodingID + "&action=cancel";
                    var result2 = await client.PostAsync(res.Uri, new StringContent(""));
                    var data2 = await result2.Content.ReadAsStringAsync();

                    StateHasChanged();
            })">
                Cancel
            </FluentButton>

        </div>
    </div>
</div>



@inject IHttpClientFactory hcf
@inject IDialogService DialogService
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using Google.Protobuf;
@using Wallpaper.CommonLanguage;

@code {
    private HttpClient client = null;
    public static Backgrounds Instance = null;
    private bool showEncodingDialog = false;
    private bool showAskMediaTypeDialog = false;
    private string encodingID = "";
    private string backgroundid = "";
    private string error = "";
    private string resultFile = "";
    private string originalFilePath = "";
    private bool encodingError = false;
    private bool cancelEncoding = false;
    private bool encodingErrorInPrestart = false;
    private bool recentBackgroundsOpen = false;
    private ElementReference colorRef;

    private Dictionary<string, RecentBackground> recentBackgrounds() => App.Instance.preferencesManager.RecentBackgroundStore.RecentBackgrounds.ToDictionary(x => x.Key, x => x.Value);

    private async Task AddSimpleBackground(string filepath, string originalfilepath)
    {
        await App.Instance.preferencesManager.Write(async (x) =>
        {
            x.SimpleBackgroundsSystem.SimpleBackgrounds.Add(new Wallpaper.CommonLanguage.SimpleBackground()
            {
                FilePath = filepath,
                OriginalFilePath = originalfilepath,
                TimestampAdded = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            });
            x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = true;
            x.SimpleBackgroundsSystem.ActiveSimpleBackgroundID = Guid.NewGuid().ToString();
            return x;
        });
    }

    private async Task SetSimpleBackground(string bkg)
    {
        await App.Instance.preferencesManager.Write(async (x) =>
        {
            x.SimpleBackgroundsSystem.ActiveSimpleBackgroundID = bkg;
            x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = true;
            return x;
        });
    }

    private async Task AddRecentColor(RecentColor color)
    {
        await App.Instance.preferencesManager.Write(async (x) =>
        {
            x.RecentColorSystem.RecentColors.Add(color);
            return x;
        });
    }

    private Dictionary<string, RecentColor> recentColors() => App.Instance.preferencesManager.RecentColorSystem.RecentColors.ToDictionary(x => x.Color, x => x);



    private async Task RemoveOldestRecentColor()
    {
        await App.Instance.preferencesManager.Write(async (x) =>
        {
            x.RecentColorSystem.RecentColors.Remove(x.RecentColorSystem.RecentColors.OrderBy(x => x.TimestampAdded).First());
            return x;
        });
    }

    

    protected override void OnInitialized()
    {
        Instance = this;
        client = hcf.CreateClient();
        client.Timeout = Timeout.InfiniteTimeSpan;
        App.Instance.preferencesManager.AddWriteHandler(async x =>
        {
            Refresh();
            return x;
        });
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    protected RenderFragment Item(RenderFragment icon, string header, string caption, RenderFragment button)
    {
        return @<div>
        <div class="bg-white/[.05] flex min-h-16 w-full flex-row items-center rounded">
            <div class="w-5"></div>
            @icon
            <div class="w-5"></div>
            <div class="flex w-full flex-row">
                <div class="flex h-full w-full flex-col items-center justify-start">
                    <div class="w-full font-normal">
                        @header
                    </div>
                    <div class="text-white/75 w-full text-xs font-light">
                        @caption
                    </div>
                </div>
                <div class="flex w-full flex-row items-center justify-end">
                    @button
                    <div class="w-4"></div>
                </div>
            </div>
        </div>
        <div class="h-1"></div>
    </div>;
    }

    private RenderFragment renderAvailableBackgroundsItem(Wallpaper.CommonLanguage.RuntimeBackground runtimeCustomBackground)
    {
        var guid = Guid.NewGuid().ToString();
        return @<div class="hover:bg-white/[.08] active:bg-white/[.05] transition-all duration-150 ease-in-out cursor-pointer flex h-24 w-24 flex-col items-center justify-center rounded overflow-hidden  border-2 @(new Func<String>(() => {
           
            var background = Home.backgrounds.FirstOrDefault(x => x.UniqueBackgroundID == Home.currentBackground ,null);
            if (background == null) {
                return "border-transparent hover:border-white";
            }
            var comparison = background.BaseBackground.FixedBackgroundID == runtimeCustomBackground.BaseBackground.FixedBackgroundID;
            return comparison ? "border-white" : "border-transparent hover:border-white";
        }).Invoke())" @onclick="@(async () => {
                            await Home.Instance.SetBackground(runtimeCustomBackground.BaseBackground.FixedBackgroundID);
                    })">
                        @{
                            switch (runtimeCustomBackground.BaseBackground.BackgroundType)
                            {
                                case "Image":
            <img src="@(runtimeCustomBackground.BaseBackground.BackgroundContent)" class="w-full h-full object-cover rounded" />
                                    break;
                                case "Video":
                                    <div class="h-full w-full">
                <video style="object-fit: cover;" id="@guid" class="pointer-events-none h-full w-full rounded" src="@(runtimeCustomBackground.BaseBackground.BackgroundContent)" type="video/webm">
                    <!--<source src="@(runtimeCustomBackground.BaseBackground.BackgroundContent)" type="video/webm" />-->
                                        </video>
                                        <script id="@(guid + "_helper")">
                                            var video = document.getElementById(document.currentScript.id.replaceAll("_helper", ""))
                                            video.muted = true;
                                            video.loop = true;
                                            video.play();
                                            console.log(video)
                                        </script>
                                    </div>
                                    break;
                                case "Embedded":
                                    <div>unrendereable</div>
                                    break;
                            }
                        }

                    </div>;
    }

    private RenderFragment renderRecentBackgroundItem(KeyValuePair<string, RecentBackground> bkg)
    {
        var guid = Guid.NewGuid().ToString();
        return @<div class="hover:bg-white/[.08] active:bg-white/[.05] transition-all duration-150 ease-in-out cursor-pointer flex h-24 w-24 flex-col items-center justify-center rounded overflow-hidden border-2 @(new Func<String>(() => {
            if (Home.Instance.IsSimpleBackground() && bkg.Value.BackgroundCase == RecentBackground.BackgroundOneofCase.SimpleBackgroundID) {
                var queried = App.Instance.preferencesManager.SimpleBackgroundsSystem.SimpleBackgrounds.FirstOrDefault(x => x.BackgroundID == bkg.Value.SimpleBackgroundID);
                if (queried == null) {
                    return "border-transparent hover:border-white";
                }
                @* var processed =  Path.GetFileName(Home.Instance.GetCurrentBackground().Replace("\\","/"));
                var hashed2 = HashCode(Path.GetFileNameWithoutExtension(queried.FilePath));
                var hashed = HashCode(Path.GetFileName(queried.FilePath));
                var hashed3 = HashCode(Path.GetFileNameWithoutExtension(processed));
                var hashed4 = HashCode(queried.FilePath); *@
                var comparison = queried.BackgroundID == Home.Instance.GetCurrentBackground();
                return comparison ? "border-white" : "border-transparent hover:border-white";
            } else {
                var comparison = bkg.Value.InstancedBackgroundID == Home.Instance.GetCurrentBackground();
                return comparison ? "border-white" : "border-transparent hover:border-white";
            }
        }).Invoke())" @onclick="@(async () => {
                    if (bkg.Value.BackgroundType == RecentBackground.Types.BackgroundType.Instanced) {
                        await Home.Instance.SetBackgroundFromPersistent(bkg.Value.InstancedBackgroundID);
                    } else {
                        var req = App.Instance.controlPort;
                        var res = new UriBuilder(
                            new Uri("http://127.0.0.1:" + req + "/setbackgroundfromcache")
                        );
                        var queried = App.Instance.preferencesManager.SimpleBackgroundsSystem.SimpleBackgrounds.FirstOrDefault(x => x.BackgroundID == bkg.Value.SimpleBackgroundID);
                        
                        res.Query = "backgroundid=" + queried.BackgroundID;
                        var result = await client.GetAsync(res.Uri);
                        Home.currentBackground = "";
                        App.SaveBackgroundData(Home.backgrounds);
                    }
            })">
        @if(bkg.Value.BackgroundType == RecentBackground.Types.BackgroundType.Instanced) {

            var background = Home.backgrounds.FirstOrDefault(x => x.UniqueBackgroundID == bkg.Value.InstancedBackgroundID);
            if (background == null) {
                <div>Background not found</div>

    } else if (background.BaseBackground.BackgroundType == "Image")
            {
        <img src="@(background.BaseBackground.BackgroundContent)" class="w-full h-full object-cover rounded" />
            }
    else if (background.BaseBackground.BackgroundType == "Video")
            {
                <div class="h-full w-full">
                    <video style="object-fit: cover;" id="@guid" class="pointer-events-none h-full w-full rounded" src="@(background.BaseBackground.BackgroundContent)" type="video/webm">
                        
                    </video>
                    <script id="@(guid + "_helper")">
                        var video = document.getElementById(document.currentScript.id.replaceAll("_helper", ""))
                        video.muted = true;
                        video.loop = true;
                        video.play();
                        console.log(video)
                    </script>
                </div>;
            }

    } else {
        var queried = App.Instance.preferencesManager.SimpleBackgroundsSystem.SimpleBackgrounds.FirstOrDefault(x => x.BackgroundID == bkg.Value.SimpleBackgroundID);

        if (queried == null) {
            <div>Background not found</div>
        } else {
            if (queried.FilePath.EndsWith(".png"))
            {
                <img src="http://127.0.0.1:@(App.Instance.controlPort)/getpreviewfile?filename=@(Path.GetFileName(queried.FilePath.Replace("\\","/")))" class="w-full h-full object-cover rounded" />
            }
            else if (queried.FilePath.EndsWith(".webm"))
            {
                <div class="h-full w-full">
                    <video style="object-fit: cover;" id="@guid" class="pointer-events-none h-full w-full rounded" src="http://127.0.0.1:@(App.Instance.controlPort)/getpreviewfile?filename=@(Path.GetFileName(queried.FilePath.Replace("\\","/")))" type="video/webm">
                    </video>
                    <script id="@(guid + "_helper")">
                        var video = document.getElementById(document.currentScript.id.replaceAll("_helper", ""))
                        video.muted = true;
                        video.loop = true;
                        video.play();
                        console.log(video)
                    </script>
                </div>
            ;
            }
        }
    }
    </div>
    ;
    }

    public RenderFragment renderRecentColorItem(string colorid, RecentColor color)
    {
        return@<div class="w-[24px] h-[24px] rounded-[100%] overflow-hidden border-2 radioinactive hover:radioactive hover:border-4 cursor-pointer flex flex-col items-center justify-center transition-all duration-150" @onclick="async () => {
            await Home.SetAccentColor(color.Color);
        }">
        <div style="border-radius: 100%; overflow: hidden; background-color: @(color.Color); min-height: var(--subsize); min-width: var(--subsize);" class="transition-all ease-in-out duration-150">
            </div>
        </div>;
    }

    private void OnDismiss()
    { }

    public int HashCode(string s)
    {
        int h = 0;
        foreach (char c in s)
        {
            h = 31 * h + c;
        }
        return h;
    }
}
