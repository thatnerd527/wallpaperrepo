<div class="h-8"></div>
<div style="
        font-size: 26px;
        font-weight: 600;
">
    Widgets
</div>

<div class="h-8"></div>
@if (Home.availablePanels.Count == 0)
{
    <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay; gap: 10px;">
        You need to install or create your own addons to use Widgets.
        <FluentAnchor Href="#" Appearance="Appearance.Hypertext" OnClick="LearnMore">Learn more.</FluentAnchor>
        <!-- FIXME: future documentation -->
    </div>
}

<div class="h-8"></div>

<div style="
        font-size: 20px;
        font-weight: 500;
">
    Active Widgets
</div>
<div class="h-4"></div>

@if (Home.panels.Count == 0)
{
    <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay; gap: 10px;">
        No active widgets.
    </div>
}
else
{
    @foreach (var item in Home.panels.Distinct(new PanelComparer()))
    {
        @RenderAccordionItem2(item)
    }
}
<div class="h-12"></div>
<div style="
        font-size: 20px;
        font-weight: 500;
">
    Available Widgets
</div>
<div class="h-4"></div>
@if (Home.availablePanels.Count == 0)
{
    <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay; gap: 10px;">
        You need to install or create your own addons to use Widgets.
        <FluentAnchor Href="#" Appearance="Appearance.Hypertext" OnClick="LearnMore">Learn more.</FluentAnchor>
        <!-- FIXME: future documentation -->
    </div>
} else {
    @foreach (var item in Home.addonManifests)
    {
        <div class="w-full flex flex-col bg-white/[.05] rounded p-4 mb-[4px]">
            <div class="font-normal">@item.Name (@item.ClientID)</div>
            <div class="h-4"></div>
            @foreach (var item2 in Home.availablePanels.Where(x => x.BasePanel.AppClientID == item.ClientID))
            {
                @RenderAvailableAccordionItem(item2)
            }
        </div>
    }
}
@*OLD*@


@*<div style="
        font-size: 20px;
        font-weight: 500;
">
    Available Widgets
</div>
<div class="h-4"></div>
<FluentAccordion>

    @foreach (var item in Home.availablePanels)
    {
        <FluentAccordionItem Heading="@(item.PanelTitle + " (" + item.LoaderPanelID + ")")" Style="
                        padding: 10px;
                                                ">
            <FluentIcon Value="@(new Icons.Regular.Size24.Window())" Color="@Color.Neutral" Slot="start" />

            <div>Panel Type: @item.PanelType</div>
            <div>Panel ID: @item.LoaderPanelID</div>

            <div>Panel Control Port (websocket): @item.ControlPort</div>

            <div class="h-7"></div>

            <div>Added by: @item.ClientID</div>
            <div class="h-4"></div>
            <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
                <FluentButton Appearance="Appearance.Neutral" @onclick="() => {
                                Home.Instance.AddPanel(item.LoaderPanelID);

                            }">
                    <FluentIcon Value="@(new Icons.Regular.Size16.AddCircle())" Slot="start" Color="Color.Success">
                    </FluentIcon>
                    Add Panel
                </FluentButton>

            </div>
        </FluentAccordionItem>
    }

</FluentAccordion>
<div class="h-8"></div>
<div style="
                font-size: 20px;
                font-weight: 500;
                                ">
    Active Panels
</div>
<div class="h-4"></div>

<FluentAccordion>

    @foreach (var item in Home.panels)
    {
        bool openthreedots = false;
        string itemid = item.PersistentPanelID;

        <FluentAccordionItem Heading="@(item.PanelTitle + " (" + item.LoaderPanelID + ")")" Style="
                        padding: 10px;
                                                        ">
            <FluentIcon Value="@(new Icons.Regular.Size24.Window())" Color="@Color.Neutral" Slot="start" />
            <div slot="end">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.MoreHorizontal())" Id="@itemid" Title="Other settings"
                              OnClick="@(() => {
                                                menuOpen[itemid] = true;
                                          })" />
            </div>
            <div>Panel Title: @openthreedots</div>
            <div>Panel Type: @item.PanelType</div>
            <div>Panel ID: @item.LoaderPanelID</div>
            <div>Persistent Panel ID: @item.PersistentPanelID</div>

            <div>Panel Control Port (websocket): @item.ControlPort</div>

            <div class="h-7"></div>

            <div>Added by: @item.ClientID</div>

            <div class="h-7"></div>

            <div>Panel Position: @item.PersistentPanelX, @item.PersistentPanelY</div>
            <div>Panel Size: @item.PersistentPanelWidth, @item.PersistentPanelHeight</div>

            <div class="h-7"></div>
            <div class="flex flex-row" style="overflow: overlay">
                <div style="width: max-content">Panel Persistent Data: @item.PersistentPanelData</div>
            </div>
            <div class="h-4"></div>
            <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
                <div style="min-width: max-content" class="flex flex-row">
                    <FluentButton Appearance="Appearance.Stealth" @onclick="() => {
                                item.PersistentPanelData = Home.availableTemplatePanels.FirstOrDefault(x => x.LoaderPanelID == item.LoaderPanelID)!.PanelDefaultData;
                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral">
                        </FluentIcon>
                        Reset Panel Data
                    </FluentButton>
                    <div class="w-4"></div>
                    <FluentButton Appearance="Appearance.Neutral" @onclick="() => {
                                item.PersistentPanelX = item.PanelRecommendedX;
                                item.PersistentPanelY = item.PanelRecommendedY;
                                item.PersistentPanelWidth = item.PanelRecommendedWidth;
                                item.PersistentPanelHeight = item.PanelRecommendedHeight;
                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral">
                        </FluentIcon>
                        Reset Panel Position
                    </FluentButton>
                    <div class="w-4"></div>
                    <FluentButton BackgroundColor="rgb(200,50,50)" @onclick="() => {
                                Home.panels.Remove(item);
                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" Slot="start" Color="Color.Neutral">
                        </FluentIcon>
                        Remove Panel
                    </FluentButton>
                </div>

            </div>

        </FluentAccordionItem>

    }

</FluentAccordion>*@


@code {
    public static Panels Instance = null;
    public static string activeWidgetsOpenAccordion;
    private Dictionary<string, Boolean> menuOpen = new Dictionary<string, Boolean>();

    private void LearnMore()
    {

    }

    protected override void OnInitialized()
    {
        activeWidgetsOpenAccordion = "";
        Instance = this;
    }
    public void Refresh()
    {
        StateHasChanged();
    }

    public async Task ToggleVisibillity(string fixedpanelid, bool newstate)
    {
        var targetpanels = Home.panels.Where(x => x.BasePanel.FixedPanelID == fixedpanelid).ToList();
        if (targetpanels.Count > 0)
        {
            var panels = Home.PanelsToSkip.ToList();
            foreach (var item in targetpanels)
            {
                if (newstate)
                {
                    panels.Remove(item.UniquePanelID);
                }
                else
                {
                    panels.Add(item.UniquePanelID);
                }
            }
            await Home.SetPanelsToSkip(panels.Distinct().ToList());
            StateHasChanged();
        }
    }

    public async Task ToggleVisibillity(string fixedpanelid)
    {
        await ToggleVisibillity(fixedpanelid, !DetermineVisibillity(fixedpanelid));
    }

    public bool DetermineVisibillity(string fixedpanelid)
    {
        var hidden = true;
        foreach (var item in Home.panels.Where(x => x.BasePanel.FixedPanelID == fixedpanelid))
        {
            if (!Home.PanelsToSkip.Contains(item.UniquePanelID))
            {
                hidden = false;
            }

        }
        return hidden;
    }

    public class PanelComparer : IEqualityComparer<Wallpaper.CommonLanguage.RuntimePanel>
    {
        public bool Equals(Wallpaper.CommonLanguage.RuntimePanel x, Wallpaper.CommonLanguage.RuntimePanel y)
        {
            if (x == null || y == null)
                return false;
            return x.BasePanel.FixedPanelID == y.BasePanel.FixedPanelID;
        }

        public int GetHashCode(Wallpaper.CommonLanguage.RuntimePanel obj)
        {
            if (obj == null)
                return 0;
            return obj.BasePanel.FixedPanelID.GetHashCode();
        }
    }

    public RenderFragment RenderAvailableAccordionItem(Wallpaper.CommonLanguage.RuntimePanel item)
    {
        return@<div class="mb-[5px] bg-white/[.05] flex flex-row min-h-16 w-full cursor-pointer items-center justify-start transition duration-100 hover:bg-white/[.08] hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)] active:bg-white/[.03] rounded" @onclick="() => {
                                Home.Instance.AddPanel(item.BasePanel.FixedPanelID);
        }">
            <div class="w-5"></div>
            <FluentIcon Value="@(new Icons.Regular.Size20.PuzzlePiece())" Color="@Color.Neutral" />
            <div class="w-5"></div>
        <div class="w-full min-h-full flex flex-row justify-center">
            <div class="w-full h-[32px] flex flex-row items-center justify-start">
                @(item.BasePanel.PanelTitle + " (" + item.BasePanel.FixedPanelID + ")")
            </div>
            <div class="flex flex-row items-center justify-end pr-4" @onclick:stopPropagation="true" @onclick="() => {}">
                <FluentButton Appearance="Appearance.Neutral" @onclick="() => {
                                    Home.Instance.AddPanel(item.BasePanel.FixedPanelID);

                                }">
                    <FluentIcon Value="@(new Icons.Regular.Size16.AddCircle())" Slot="start" Color="Color.Success">
                    </FluentIcon>
                    Add
                </FluentButton>
            </div>
        </div>
        
    </div>;
    }

    public RenderFragment RenderAccordionItem2(Wallpaper.CommonLanguage.RuntimePanel item)
    {
        bool accordionopen = activeWidgetsOpenAccordion == item.BasePanel.FixedPanelID;
        string itemid = item.BasePanel.FixedPanelID;
        int count = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID).Count();
        bool doesMultipleExist = count > 1;


        return@<div>
        <div class="bg-white/[.05] flex min-h-16 w-full cursor-pointer items-center @(accordionopen ? "rounded-t-lg" : "rounded mb-[4px]") transition duration-100 hover:bg-white/[.08] hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)] active:bg-white/[.03]" @onclick="@(() => {
            if (activeWidgetsOpenAccordion.Length != 0)
            {
                if (activeWidgetsOpenAccordion == itemid)
                {
                    activeWidgetsOpenAccordion = "";
                }
                else
                {
                    activeWidgetsOpenAccordion = itemid;
                }
            }
            else
            {
                activeWidgetsOpenAccordion = itemid;
            }
        })" >
            <div class="w-5"></div>
            <FluentIcon Value="@(new Icons.Regular.Size20.PuzzlePiece())" Color="@Color.Neutral" />
            <div class="w-5"></div>
            <div class="flex w-full flex-row">
                <div class="flex h-full w-full flex-col items-center justify-start">
                    <div class="w-full font-normal">
                        @(doesMultipleExist ? item.BasePanel.PanelTitle + " (" + item.BasePanel.FixedPanelID + ") (" + count + ")" : item.BasePanel.PanelTitle + " (" + item.BasePanel.FixedPanelID + ")")
                    </div>
                </div>
                <div class="flex flex-row items-center justify-end">
                    <div slot="end" class="h-full flex flex-row items-center justify-center">
                        <div @onclick:stopPropagation="true" @onclick="() => {}" class="h-full flex flex-row items-center justify-center">
                            <FluentSwitch Value="@(doesMultipleExist ? !DetermineVisibillity(item.BasePanel.FixedPanelID) : !Home.PanelsToSkip.Contains(item.UniquePanelID))" ValueChanged="@(async (v) => {
                                    if (!doesMultipleExist)
                                    {
                                        var panels = Home.PanelsToSkip.ToList();
                                        if (v)
                                        {
                                            panels.Remove(item.UniquePanelID);
                                        }
                                        else
                                        {
                                            panels.Add(item.UniquePanelID);
                                        }
                                        await Home.SetPanelsToSkip(panels);
                                    }
                                    else
                                    {
                                        await ToggleVisibillity(item.BasePanel.FixedPanelID, v);
                                    }
                                })"></FluentSwitch>
                        </div>
                        <div class="w-4"></div>
                        <div>
                            @(DetermineVisibillity(item.BasePanel.FixedPanelID) ? "Hidden" : "Visible")
                        </div>

                    </div>
                    <div class="w-4"></div>
                    <div class="transition-all duration-150 ease-in-out @(accordionopen ? "rotate-0" : "rotate-180")">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ChevronUp())" Color="@Color.Neutral" />
                    </div>

                    <div class="w-4"></div>
                </div>
            </div>
        </div>
        <div class="transition-[height] @(accordionopen ? "h-fit opacity-100" : "h-[0px] opacity-0") w-full overflow-hidden transition-all duration-150">
            <div class="bg-white/[.05] mt-[1px] flex min-h-16 w-full flex-col items-start p-4">
                <div>Panel Title: @item.BasePanel.PanelTitle</div>
                <div>Panel Type: @item.BasePanel.PanelType</div>
                <div>Panel ID: @item.BasePanel.FixedPanelID</div>
               @* <div>Persistent Panel ID: @item.PersistentPanelID</div>*@

                <div>Panel Control Port (websocket): @item.ControlPort</div>

                <div class="h-7"></div>

                <div>Added by: @item.BasePanel.AppClientID</div>

                <div class="flex w-full flex-row justify-end"></div>
            </div>

            @if (doesMultipleExist) {
            <div class="bg-white/[.05] mt-[1px] flex min-h-16 w-full flex-col items-center p-2">
                @{
            var number = 1;
                    @foreach (var key in Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID))
            {

                    <div class="flex flex-row items-center bg-white/[.03] hover:bg-white/[.05] w-full p-4 rounded transition-all duration-150 ease-in-out hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)] active:bg-white/[.02] mb-[2px]" @onclick="@(async () => {
                            var v = Home.PanelsToSkip.Contains(key.UniquePanelID);
                            var panels = Home.PanelsToSkip.ToList();
                            if (v)
                            {
                                panels.Remove(key.UniquePanelID);
                            }
                            else
                            {
                                panels.Add(key.UniquePanelID);
                            }
                            await Home.SetPanelsToSkip(panels);
                        })">

                        <div class="w-full flex flex-row">
                            <FluentIcon Value="@(new Icons.Regular.Size16.Window())" Color="@Color.Neutral">
                            </FluentIcon>
                            <div class="w-4"></div>
                            <div>@Home.panels.FirstOrDefault(x => x.UniquePanelID == key.UniquePanelID).BasePanel.PanelTitle @number</div>
                        </div>
                        <div class="flex flex-row items-center justify-end">
                            <div @onclick="(e) => {}" @onclick:stopPropagation="true" class="h-full flex flex-col justify-center items-center">
                                <FluentSwitch ValueChanged="@(async (v) => {
                                    var panels = Home.PanelsToSkip.ToList();
                                    if (v)
                                    {
                                        panels.Remove(key.UniquePanelID);
                                    }
                                    else
                                    {panels.Add(key.UniquePanelID);

                                    }
                                    await Home.SetPanelsToSkip(panels);
                                })" Value="@(!Home.PanelsToSkip.Contains(key.UniquePanelID))"></FluentSwitch>
                            </div>
                            <div class="w-2"></div>
                            <div @onclick="() => {}" @onclick:stopPropagation="true">
                                <FluentButton OnClick="@((e) => {
                                        key.PersistentData = Home.availableTemplatePanels.FirstOrDefault(x => x.FixedPanelID == item.BasePanel.FixedPanelID)!.DefaultData;
                                        Home.Instance.UpdatePanelData();
                                        App.SavePanelData(Home.panels);
                                    })">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Color="Color.Neutral">
                                    </FluentIcon>
                                </FluentButton>
                            </div>
                            <div class="w-2"></div>
                            <div @onclick="() => {}" @onclick:stopPropagation="true">
                                <FluentButton BackgroundColor="rgb(200,50,50)" OnClick="@((e) => {
                                        Home.panels.Remove(key);
                                        Home.Instance.UpdatePanelData();
                                        App.SavePanelData(Home.panels);
                                    })">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())" Color="Color.Neutral">
                                    </FluentIcon>
                                </FluentButton>
                            </div>

                        </div>
                    </div>
            number = number + 1;
            }
                }
            </div>
        }
            <div class="flex flex-row items-center h-max bg-black/[.35] p-2 rounded-b-lg mb-[4px]" style="overflow: overlay; width: calc(100%)">
                <div style="min-width: max-content" class="flex flex-row w-full items-end justify-end">
                    <FluentButton Appearance="Appearance.Stealth" @onclick="() => {
                                var panels = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID);
                                foreach (var panel in panels)
                                {
                                    panel.PersistentData = Home.availableTemplatePanels.FirstOrDefault(x => x.FixedPanelID == item.BasePanel.FixedPanelID)!.DefaultData;
                                }
                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral">
                        </FluentIcon>
                        @(doesMultipleExist ? "Reset all datas" : "Reset data")
                    </FluentButton>
                    <div class="w-4"></div>
                    <FluentButton Appearance="Appearance.Neutral" @onclick="() => {
                                var panels = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID);
                                foreach (var panel in panels)
                                {
                                    panel.PanelX = panel.BasePanel.PanelRecommendedX;
                                    panel.PanelY= panel.BasePanel.PanelRecommendedY;
                                    panel.PanelWidth = panel.BasePanel.PanelRecommendedWidth;
                                    panel.PanelHeight= panel.BasePanel.PanelRecommendedHeight;
                                }

                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral">
                        </FluentIcon>
                        @(doesMultipleExist ? "Reset all positions" : "Reset position")
                    </FluentButton>
                    <div class="w-4"></div>
                    <FluentButton BackgroundColor="rgb(200,50,50)" @onclick="() => {
                                var panels = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID);
                                foreach (var panel in panels.ToList())
                                {
                                    Home.panels.Remove(panel);
                                }

                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" Slot="start" Color="Color.Neutral">
                        </FluentIcon>
                        @(doesMultipleExist ? "Remove all" : "Remove")
                    </FluentButton>
                </div>

            </div>
        </div>

    </div>;
    }

    public RenderFragment RenderAccordionItem(Wallpaper.CommonLanguage.RuntimePanel item)
    {
        string itemid = item.UniquePanelID;
        int count = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID).Count();
        bool doesMultipleExist = count > 1;


        return@<FluentAccordionItem Heading="@(
            doesMultipleExist ? item.BasePanel.PanelTitle + " (" + item.BasePanel.FixedPanelID + ") (" + count + ")" : item.BasePanel.PanelTitle + " (" + item.BasePanel.FixedPanelID + ")"
                )" Style="padding: 10px;">
        <FluentIcon Value="@(new Icons.Regular.Size24.Window())" Color="@Color.Neutral" Slot="start" />
        <div slot="end" class="h-full flex flex-row items-center justify-center">
            <FluentSwitch Value="@(doesMultipleExist ? !DetermineVisibillity(item.BasePanel.FixedPanelID) : !Home.PanelsToSkip.Contains(item.UniquePanelID))" ValueChanged="@(async (v) => {
                    if (!doesMultipleExist)
                    {
                        var panels = Home.PanelsToSkip.ToList();
                        if (v)
                        {
                            panels.Remove(item.UniquePanelID);
                        }
                        else
                        {
                            panels.Add(item.UniquePanelID);
                        }
                        await Home.SetPanelsToSkip(panels);
                    }
                    else
                    {
                        await ToggleVisibillity(item.BasePanel.FixedPanelID, v);
                    }
                })"></FluentSwitch>
            <div class="w-4"></div>
            <div>
                @(DetermineVisibillity(item.BasePanel.FixedPanelID) ? "Hidden" : "Visible")
            </div>

        </div>
        <div class="bg-white/[.05] w-full h-max p-4 rounded">
            <div>Panel Title: @item.BasePanel.PanelTitle</div>
            <div>Panel Type: @item.BasePanel.PanelType</div>
            <div>Panel ID: @item.BasePanel.FixedPanelID</div>
            <div>Persistent Panel ID: @item.UniquePanelID</div>

            <div>Panel Control Port (websocket): @item.ControlPort</div>

            <div class="h-7"></div>

            <div>Added by: @item.BasePanel.AppClientID</div>
        </div>


        <div class="h-2"></div>
        @if (doesMultipleExist) {
        <div class="bg-white/[.05] p-2 w-full rounded">
            @{
        var number = 1;
                @foreach (var key in Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID).Select(x => x.UniquePanelID))
        {

                <div class="flex flex-row items-center bg-white/[.03] hover:bg-white/[.05] w-full p-4 rounded transition-all duration-150 ease-in-out hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)] active:bg-white/[.02] mb-[2px]" @onclick="@(async () => {
                            var v = Home.PanelsToSkip.Contains(key);
                            var panels = Home.PanelsToSkip.ToList();
                            if (v)
                            {
                                panels.Remove(key);
                            }
                            else
                            {
                                panels.Add(key);
                            }
                            await Home.SetPanelsToSkip(panels);
                        })">

                    <div class="w-full flex flex-row">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Window())" Color="@Color.Neutral">
                        </FluentIcon>
                        <div class="w-4"></div>
                        <div>@Home.panels.FirstOrDefault(x => x.UniquePanelID == key).BasePanel.PanelTitle @number</div>
                    </div>
                    <div class="flex flex-row items-center justify-end">
                        <div @onclick="(e) => {}" @onclick:stopPropagation="true" class="h-full flex flex-col justify-center items-center">
                            <FluentSwitch ValueChanged="@(async (v) => {
                                    var panels = Home.PanelsToSkip.ToList();
                                    if (v)
                                    {
                                        panels.Remove(key);
                                    }
                                    else
                                    {panels.Add(key);

                                    }
                                    await Home.SetPanelsToSkip(panels);
                                })" Value="@(!Home.PanelsToSkip.Contains(key))"></FluentSwitch>
                        </div>
                        <div class="w-2"></div>
                        <div @onclick="() => {}" @onclick:stopPropagation="true">
                            <FluentButton OnClick="@((e) => {
                                        item.PersistentData = Home.availableTemplatePanels.FirstOrDefault(x => x.FixedPanelID == item.BasePanel.FixedPanelID)!.DefaultData;
                                        Home.Instance.UpdatePanelData();
                                        App.SavePanelData(Home.panels);
                                    })">
                                <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Color="Color.Neutral">
                                </FluentIcon>
                            </FluentButton>
                        </div>
                        <div class="w-2"></div>
                        <div @onclick="() => {}" @onclick:stopPropagation="true">
                            <FluentButton BackgroundColor="rgb(200,50,50)" OnClick="@((e) => {
                                        Home.panels.Remove(item);
                                        Home.Instance.UpdatePanelData();
                                        App.SavePanelData(Home.panels);
                                    })">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())" Color="Color.Neutral">
                                </FluentIcon>
                            </FluentButton>
                        </div>

                    </div>
                </div>
        number = number + 1;
        }
            }
        </div>
    }
        <div class="h-4"></div>
        <div class="flex flex-row items-center h-max bg-black/[.35] ml-[-8px] mb-[-8px] mr-[-8px] p-2 rounded-b-lg" style="padding-left: 16px; overflow: overlay; width: calc(100% + 16px)">
            <div style="min-width: max-content" class="flex flex-row w-full items-end justify-end">
                <FluentButton Appearance="Appearance.Stealth" @onclick="() => {
                                var panels = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID);
                                foreach (var panel in panels)
                                {
                                    panel.PersistentData = Home.availableTemplatePanels.FirstOrDefault(x => x.FixedPanelID == item.BasePanel.FixedPanelID)!.DefaultData;
                                }
                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral">
                    </FluentIcon>
                    @(doesMultipleExist ? "Reset all datas" : "Reset data")
                </FluentButton>
                <div class="w-4"></div>
                <FluentButton Appearance="Appearance.Neutral" @onclick="() => {
                                var panels = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID);
                                foreach (var panel in panels)
                                {
                                    panel.PanelX = panel.BasePanel.PanelRecommendedX;
                                    panel.PanelY = panel.BasePanel.PanelRecommendedY;
                                    panel.PanelWidth = panel.BasePanel.PanelRecommendedWidth;
                                    panel.PanelHeight = panel.BasePanel.PanelRecommendedHeight;
                                }

                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral">
                    </FluentIcon>
                    @(doesMultipleExist ? "Reset all positions" : "Reset position")
                </FluentButton>
                <div class="w-4"></div>
                <FluentButton BackgroundColor="rgb(200,50,50)" @onclick="() => {
                                var panels = Home.panels.Where(x => x.BasePanel.FixedPanelID == item.BasePanel.FixedPanelID);
                                foreach (var panel in panels.ToList())
                                {
                                    Home.panels.Remove(panel);
                                }

                                Home.Instance.UpdatePanelData();
                                App.SavePanelData(Home.panels);
                            }">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" Slot="start" Color="Color.Neutral">
                    </FluentIcon>
                    @(doesMultipleExist ? "Remove all" : "Remove")
                </FluentButton>
            </div>

        </div>

    </FluentAccordionItem>;

    }
}
