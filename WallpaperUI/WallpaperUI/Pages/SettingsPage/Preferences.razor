<div class="h-8"></div>
<div style="
                font-size: 26px;
                font-weight: 600;
                        ">
    Settings
</div>
<div class="h-8"></div>
<div style="
                font-size: 20px;
                font-weight: 500;
                            ">
    General
</div>
<div class="h-4"></div>
@Item(
    @<FluentIcon Value="@(new Icons.Regular.Size24.ArrowCounterclockwise())" Color="Color.Neutral"></FluentIcon>,
    "Restart Application",
    "In case something isn't working right, you may restart the application.",
    @<FluentButton Appearance="Appearance.Neutral" @onclick="@(() => 
        {
            JS.InvokeVoidAsync("remoterestart");
        })"> Restart now </FluentButton>
)
@Item(
    @<FluentIcon Value="@(new Icons.Regular.Size24.Dismiss())" Color="Color.Neutral"></FluentIcon>,
    "Quit Application",
    "Exit the application at will.",
    @<FluentButton Appearance="Appearance.Neutral" @onclick="@(() => 
        {
            // TODO: Perhaps add a single-use modal that users needs to restart the app manually
            JS.InvokeVoidAsync("remoteexit");
        })"> Exit now </FluentButton>
    )
@Item(
    @<FluentIcon Value="@(new Icons.Regular.Size24.ArrowReset())" Color="Color.Neutral"></FluentIcon>,
    "Reset Settings",
    "Bring everything back to its default state.",
    @<FluentButton Appearance="Appearance.Accent" @onclick="@(() => 
        {
            App.Instance.preferencesManager.Clear();
        })"> Reset settings </FluentButton>
    )

@* <div class="card flex flex-row items-center" style="padding-left: 16px; overflow: overlay;">
    <FluentButton Appearance="Appearance.Neutral" @onclick="@(() => {
                    JS.InvokeVoidAsync("remoterestart");

                })">
        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowCounterclockwise())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Restart Application
    </FluentButton>
    <div class="w-4"></div>
    <FluentButton Appearance="Appearance.Neutral" @onclick="@(() => {
                    JS.InvokeVoidAsync("remoteexit");

                })">
        <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Quit Application
    </FluentButton>
    <div class="w-4"></div>
    <FluentButton Appearance="Appearance.Neutral" @onclick="() => {
                    App.Instance.preferencesManager.Clear();
                }">
        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowReset())" Slot="start" Color="Color.Neutral"></FluentIcon>
        Reset Settings
    </FluentButton>
</div> *@

<div class="h-4"></div>

<Addons></Addons>

<div class="h-4"></div>
<div style="
                font-size: 20px;
                font-weight: 500;
                            ">
    Advanced
</div>
<div class="h-4"></div>

<div class="bg-white/[.05] flex min-h-16 w-full cursor-pointer items-center rounded p-4 transition duration-100 hover:bg-white/[.08] hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)] active:bg-white/[.03]" @onclick="async () => {
    // FIXME: Verify this if
    autoStart = !autoStart;
}">
    <div class="w-full">
        Enable Auto start on user login
    </div>
    <div class="flex w-full flex-row justify-end">
        @String.Format(autoStart ? "On" : "Off")
        <FluentSwitch ValueChanged="@(async (v) => {
            var res = new UriBuilder(
                        new Uri($"http://127.0.0.1:{App.Instance.controlPort}/autostart")
                    );
            res.Query = v ? "?enable=true" : "";
            var request = await client.PostAsync(res.Uri, null);
            await GetStatus();

        })" Value="autoStart"></FluentSwitch>
    </div>
</div>
<div class="h-1"></div>

<div class="bg-white/[.05] flex min-h-16 w-full cursor-pointer items-center rounded p-4 transition duration-100 hover:bg-white/[.08] hover:shadow-[0_0px_0px_1px_rgba(255,255,255,0.1)] active:bg-white/[.03]" @onclick="async () => {
    // FIXME: Verify this if
    enableDebug = !enableDebug;
}">
    <div class="w-full">
        Enable Debug
    </div>
    <div class="flex w-full flex-row justify-end">
        @String.Format(enableDebug ? "On" : "Off")
        <FluentSwitch Value="enableDebug"></FluentSwitch>
    </div>
</div>
<div class="h-1"></div>

<div class="h-8"></div>
<div style="
                font-size: 20px;
                font-weight: 500;
                            ">
    Attributions
    <!-- TODO: attributions section -->
</div>

@inject IHttpClientFactory hcf
@inject IJSRuntime JS
@code {
    private HttpClient client;

    private bool autoStart = false;

    private bool enableDebug = false;
    private bool testBool = false;

    public static Preferences Instance = null;

    @* private async Task GetDebugInfo()
    {    } *@
    private async Task GetStatus()
    {
        var res = new UriBuilder(
                new Uri($"http://127.0.0.1:{App.Instance.controlPort}/autostart")
            );
        var request = await client.GetAsync(res.Uri);
        autoStart = await request.Content.ReadAsStringAsync() == "true";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Instance = this;
        client = hcf.CreateClient();
        await GetStatus();
    }

    protected RenderFragment Item(RenderFragment icon, string header, string caption, RenderFragment button)
    {
        return @<div><div class="bg-white/[.05] flex min-h-16 w-full flex-row items-center rounded">
        <div class="w-5"></div>
        @icon
        <div class="w-5"></div>
        <div class="flex w-full flex-row">
            <div class="flex h-full w-full flex-col items-center justify-start">
                <div class="w-full font-normal">
                    @header
                </div>
                <div class="text-white/75 w-full text-xs font-light">
                    @caption
                </div>
            </div>
            <div class="flex w-full flex-row items-center justify-end">
                @button
                <div class="w-4"></div>
            </div>
        </div>
    </div>
        <div class="h-1"></div></div>;
    }

// lul i dunno how one does these
//
//    protected RenderFragment Switch(string description, bool value, Action? action)
//    {
//        return @<div class="flex min-h-16 w-full cursor-pointer items-center rounded p-4" style="background-color: rgba(255,255,255,0.05)" @onclick="async () => {
//            ToggleValue(value);
//            StateHasChanged();
//        }">
//            <div class="w-full">
//                @description
//            </div>
//            <div class="flex w-full flex-row justify-end">
//                @String.Format(value ? "On" : "Off")
//                <FluentSwitch ValueChanged="@(action ?? (() => {}))" Value="value"></FluentSwitch>
//            </div>
//        </div>
//    ;
//    }
//
//    protected bool ToggleValue(bool value) => !value;
}
