@page "/"
@inject IJSRuntime JS

<div class="card absolute right-0 top-0 m-4 flex-col items-center justify-center" style="
            z-index: 2;
            padding: 24px;
            display: @((!connectionStatus) ? "flex" : "none");
">
    <div class="flex h-full w-full flex-row">
        <FluentIcon Value="@(new Icons.Regular.Size24.Warning())">

        </FluentIcon>
        <div class="w-4"></div>
        UI Server connection terminated unexpectedly.
    </div>
    <div class="h-4"></div>
    <div class="flex w-full flex-row justify-center justify-items-end">
        <FluentButton Style="width: 100%;" @onclick="ReloadUI">
            Reload UI
        </FluentButton>
    </div>
</div>
<div class="card absolute right-0 top-0 m-4 flex-col items-center justify-center" style="
            z-index: 2;
            padding: 24px;
            display: @((restartInProgress) ? "flex" : "none");
            width: 256px;
">
    <div class="flex h-full w-full flex-row">
        <FluentIcon Value="@(new Icons.Regular.Size24.ArrowClockwise())">

        </FluentIcon>
        <div class="w-4"></div>
        Restart in progress.
    </div>
    <div class="h-4"></div>
    <div class="w-full">
        <FluentProgress></FluentProgress>
    </div>
</div>
<div class="card absolute right-0 top-0 m-4 flex-col items-center justify-center" style="
            z-index: 2;
            padding: 24px;
            display: @((exitInProgress) ? "flex" : "none");
            width: 256px;
">
    <div class="flex h-full w-full flex-row">
        <FluentIcon Value="@(new Icons.Regular.Size24.Dismiss())">

        </FluentIcon>
        <div class="w-4"></div>
        Exit in progress.
    </div>
    <div class="h-4"></div>
    <div class="w-full">
        <FluentProgress></FluentProgress>
    </div>
</div>

@if (mode == "wallpaper")
{

    <div style="height: 100%; background-color: transparent; overflow: clip" class="text-white">
        <div class="absolute h-full w-full object-cover">
            @RenderBackgroundInternals()
        </div>
        <img src="./assets/background.png" class="pointer-events-none absolute h-full w-full object-cover" style="z-index: -1" />

        <div class="card absolute bottom-0 m-4 mb-16 p-4" style="
      width: 256px;
      height: 80px;
      right: 0px;
      display: @((loading) ? "block" : "none");
        ">
            <div class="font-bold">Loading wallpaper..</div>
            <div class="mt-4">
            </div>
            <FluentProgress></FluentProgress>
        </div>
        <div class="absolute top-0 m-4 p-4" style="
      width: 256px;
      height: 80px;
      right: 0px;
      display: none;
        ">
            <Card IsDraggable="false" IsResizable="false">
                <div class="flex h-full w-full flex-col items-center" style="
                overflow: overlay
                ">
                    <h2 style="
                    font-size: 1.5rem;
                    font-weight: 600;
                    color: white;
                    margin-bottom: 1rem;
                    margin-top: 1rem;
                    ">
                        Add panels
                    </h2>
                    <FluentListbox TOption="string" ValueChanged="@(e => listboxValue = e)" Height="100%" Width="100%" Style="
                    overflow: clip
    ">
                        @foreach (var panel in availablePanels)
                        {
                            <FluentOption Value="@panel.BasePanel.FixedPanelID">"@panel.BasePanel.FixedPanelID" Created By: @panel.BasePanel.AppClientID</FluentOption>
                            <div class="h-2"></div>
                        }

                    </FluentListbox>
                    <div class="h-8">
                    </div>
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Style="
                    min-height: 32px;
                    " Disabled="!availablePanels.Select(x => x.BasePanel.FixedPanelID).Contains(listboxValue)" @onclick="() => {
                        AddPanel(listboxValue);
                }">
                        Add
                    </FluentButton>
                </div>
            </Card>
        </div>
        <div style="
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        position: absolute;
        top: 0px;
left: 0px;
        ">
            
            @{
                var filtered = panels.Where(x => !PanelsToSkip.Contains(x.BasePanel.FixedPanelID));
                @foreach (var panel in filtered)
                {

                    @RenderPanel(panel.UniquePanelID)
                }
            }
        </div>
        <div style="
        position: absolute;
        bottom: 0px;
        right: 0px;
        overflow: hidden;
        margin: 16px;
        min-height: 16px;
        min-width: 16px;
        margin-bottom: 64px;
        padding: 8px;
        display: none;
        " class="card">
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Settings())"
                          Title="Settings"
                          @onclick="OpenSettings" />
        </div>



    </div>

}
else if (mode == "settings")
{
    <div style="
        position: absolute;
        top: 0px;
        left: 0px;
        width: 100vw;
        height: 100vh;
        ">
        <Settings home="this" />
    </div>
}
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using Wallpaper.CommonLanguage;
@code {
    string? listboxValue = "";
    public static List<Wallpaper.CommonLanguage.RuntimePanel> availablePanels = new();
    public static List<Wallpaper.CommonLanguage.BasePanel> availableTemplatePanels = new();
    public static List<Wallpaper.CommonLanguage.RuntimePanel> panels = new();
    public static List<Wallpaper.CommonLanguage.RuntimePanel> deletedPanels = new();
    public static List<PanelHeader> panelHeaders = new List<PanelHeader>();

    public static List<Wallpaper.CommonLanguage.RuntimeBackground> availableBackgrounds = new();
    public static List<Wallpaper.CommonLanguage.BaseBackground> availableTemplateBackgrounds = new();
    public static List<Wallpaper.CommonLanguage.RuntimeBackground> backgrounds = new();
    public static List<Wallpaper.CommonLanguage.RuntimeBackground> deletedBackground = new();

    public static List<WallpaperUI.Cs.AddonManifest> addonManifests = new();
    public static List<WallpaperUI.Cs.AddonManifest> disabledAddons = new();

    public static string currentBackground = null;
    public static bool connectionStatus = true;
    public static bool restartInProgress = false;
    public static bool exitInProgress = false;

    public static Home Instance = null;
    private bool loading = true;
    public string mode = "panel";

    protected override async Task OnInitializedAsync()
    {

        Instance = this;
        App.Instance.preferencesManager.AddWriteHandler(async (x) =>
        {
            StateHasChanged();
            return x;
        });
        mode = await JS.InvokeAsync<string>("mode") == null ? "wallpaper" : await JS.InvokeAsync<string>("mode");
        await JS.InvokeVoidAsync("dotnetready");


    }

    public static string AccentColor
    {
        get => App.Instance.preferencesManager.Value.AccentColor;

    }

    public static async Task SetAccentColor(string color)
    {
        await App.Instance.preferencesManager.Write(async (x) => { x.AccentColor = color; return x; });
    }

    public static List<string> PanelsToSkip
    {
        get => App.Instance.preferencesManager.PanelsToSkip.Select(x => x.UniquePanelID).ToList();
    }

    public static async Task SetPanelsToSkip(List<string> panels2)
    {
        await App.Instance.preferencesManager.Write(async (x) =>
            {
                x.PanelsToSkip.Clear();
                x.PanelsToSkip.AddRange(panels2.Select(x => panels.FirstOrDefault(y => y.UniquePanelID == x)));
                return x;
            });
    }

    private async void ReloadUI()
    {
        await JS.InvokeVoidAsync("reloadui");
    }

    private async void OpenSettings()
    {
        await JS.InvokeVoidAsync("opensettings");
    }

    private RenderFragment RenderBackgroundInternals()
    {
        SimpleBackgroundsSystem data = App.Instance.preferencesManager.SimpleBackgroundsSystem;
        if (data == null)
        {
            data = new SimpleBackgroundsSystem();
        }
        if (!data.IsSimpleBackgroundEnabled)
        {
            return@<Background runtimeCustomBackground="@backgrounds.FirstOrDefault(x => x.UniqueBackgroundID == currentBackground)" saveAction="() => {
                            App.SaveBackgroundData(backgrounds);
                        }" />;
        }
        else
        {
            return @<SimpleBackground />;
        }
    }

    public string GetCurrentBackground()
    {
        SimpleBackgroundsSystem data = App.Instance.preferencesManager.SimpleBackgroundsSystem;
        if (data == null)
        {
            data = new SimpleBackgroundsSystem();
        }
        if (data.IsSimpleBackgroundEnabled)
        {
            return data.ActiveSimpleBackgroundID;
        }
        else
        {
            return currentBackground;
        }
    }

    public bool IsSimpleBackground()
    {
        SimpleBackgroundsSystem data = App.Instance.preferencesManager.SimpleBackgroundsSystem;
        if (data == null)
        {
            data = new SimpleBackgroundsSystem();
        }
        return data.IsSimpleBackgroundEnabled;
    }

    [JSInvokable]
    public static void SetRestart()
    {
        restartInProgress = true;
        Instance.StateHasChanged();
    }

    [JSInvokable]
    public static void SetExit()
    {
        exitInProgress = true;
        Instance.StateHasChanged();
    }

    public void UpdatePanelData()
    {
        StateHasChanged();
    }

    [JSInvokable]
    public static void SetConnectionStatus(bool status)
    {
        connectionStatus = status;
        Instance.StateHasChanged();
    }

    public RenderFragment RenderPanel(string persistentPanelID)
    {
        var panel = panels.FirstOrDefault(x => x.UniquePanelID == persistentPanelID);
        return @<Panel runtimeCustomPanel="@panel" saveAction="() => {
            App.SavePanelData(panels);
        }" closeAction="() => {
            panels.Remove(panel);
            App.SavePanelData(panels);
            StateHasChanged();
        }" />
    ;
    }

    public static void SetData(List<Wallpaper.CommonLanguage.RuntimePanel> availablePanels2, List<Wallpaper.CommonLanguage.BasePanel> availableTemplatePanels2, List<Wallpaper.CommonLanguage.RuntimePanel> panels2, List<Wallpaper.CommonLanguage.RuntimePanel> deletedPanels2)
    {
        availablePanels = availablePanels2;
        availableTemplatePanels = availableTemplatePanels2;
        panels = panels2;
        deletedPanels = deletedPanels2;

        Console.WriteLine(availablePanels2.Count);
        Console.WriteLine("Data set");
        Instance.loading = false;
        Instance.StateHasChanged();
    }

    public static void SetBackgroundData(List<Wallpaper.CommonLanguage.RuntimeBackground> availableBackgrounds2, List<Wallpaper.CommonLanguage.BaseBackground> availableTemplateBackgrounds2, List<Wallpaper.CommonLanguage.RuntimeBackground> backgrounds2, List<Wallpaper.CommonLanguage.RuntimeBackground> deletedBackground2, string currentBackground2)
    {
        availableBackgrounds = availableBackgrounds2;
        availableTemplateBackgrounds = availableTemplateBackgrounds2;
        backgrounds = backgrounds2;
        deletedBackground = deletedBackground2;
        currentBackground = currentBackground2;
        Console.WriteLine("Background data set");
        Instance.loading = false;
        Instance.StateHasChanged();
    }

    public async Task SetBackground(string backgroundID)
    {
        await App.Instance.preferencesManager.Write(async (x) =>
        {
            x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = false;
            return x;
        });
        if (backgrounds.Any(x => x.BaseBackground.FixedBackgroundID == backgroundID))
        {
            currentBackground = backgrounds.FirstOrDefault(x => x.BaseBackground.FixedBackgroundID == backgroundID).UniqueBackgroundID;
        }
        else
        {
            var background = availableBackgrounds.FirstOrDefault(x => x.BaseBackground.FixedBackgroundID == backgroundID).Clone();
            backgrounds.Add(background);
            currentBackground = background.UniqueBackgroundID;

        }
        App.SaveBackgroundData(backgrounds);
        StateHasChanged();
    }

    public async Task SetBackgroundFromPersistent(string backgroundID)
    {
        await App.Instance.preferencesManager.Write(async (x) =>
        {
            x.SimpleBackgroundsSystem.IsSimpleBackgroundEnabled = false;
            return x;
        });
        currentBackground = backgroundID;
        App.SaveBackgroundData(backgrounds);
        StateHasChanged();
    }

    public Wallpaper.CommonLanguage.RuntimePanel AddPanel(String panelID)
    {
        var cloned = availablePanels.FirstOrDefault(x => x.BasePanel.FixedPanelID == panelID)!.Clone();

        cloned.UniquePanelID = Guid.NewGuid().ToString();

        panels.Add(cloned);
        App.SavePanelData(panels);
        StateHasChanged();
        return cloned;
    }
}